{"remainingRequest":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/wangxufei/Desktop/FlowModel/src/graph/token.js","dependencies":[{"path":"/Users/wangxufei/Desktop/FlowModel/src/graph/token.js","mtime":1652163070426},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/wangxufei/Desktop/FlowModel/src/graph/token.js"],"names":["Stake","Unstake","Vest","Token","symbol","totalSupply","allocations","community","Number","allocatedAmount","Map","allocatedAmountDelta","allocatedAmountTotal","allocationPercent","stakedAmount","stakedAmountDelta","stakedTotal","freeMoney","freeMoneyDelta","freeMoneyTotal","forEach","element","set","name","prop","communityPolicy","stakingPool","stakingRewardLifetime","stakingLifetime","stakingRewardRefreshPeriod","stakingRewardRefresh","stakingRewardDefactor","stakingRewardDecreaseFactor","canVest","has","amount","get","toFixed","preNode","curDay","constructor","item","rewardAllocatedDelta","unstakeHistory","vestHistory","console","log","entries"],"mappings":"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","sourcesContent":["import { Stake, Unstake, Vest } from \"./action\";\n\nexport class Token {\n\n    // constructor\n    // params:\n    //      symbol: \"Apex\",\n    //      totalSupply: 1000000,\n    //      allocations: [\n    //          { name: \"Team\", prop: 0, class: \"team-slider\" },\n    //          { name: \"Investor\", prop: 0, class: \"investor-slider\" },\n    //          { name: \"Advisor\", prop: 0, class: \"advisor-slider\" },\n    //          { name: \"Foundation\", prop: 0, class: \"foundation-slider\" },\n    //          { name: \"Community\", prop: 0, class: \"community-slider\" },\n    //      ],\n    //      community: {\n    //          allocations: [\n    //              { name: \"Airdrop\", prop: 0, class: \"airdrop-turntable\" },\n    //              { name: \"Staking\", prop: 0, class: \"staking-turntable\" },\n    //          ],\n    //          stakingLifetime: 0,\n    //          stakingRewardRefresh: 0,\n    //          stakingRewardDecreaseFactor: 0,\n    //      },\n    constructor(symbol, totalSupply, allocations, community) {\n        this.symbol = symbol;\n        this.totalSupply = Number(totalSupply);\n\n        // TODO stakedPercent 是否必要?\n        // TODO freeMoneyPercent 是否必要？\n\n        // allocatedAmount: 项目发行代币已通过 Vest 分配出去的数量\n        // Example: {\"Team\": 200, \"Community\": 800}\n        this.allocatedAmount = new Map();\n        // allocatedAmountDelta: 项目发行代币已通过 Vest 分配出去的数量 增量数据\n        this.allocatedAmountDelta = new Map();\n        // allocatedAmountTotal: 项目发行代币已通过 Vest 分配出去的总量\n        this.allocatedAmountTotal = 0;\n        // allocationPercent: 项目代币分配方案\n        // Example: {\"Team\": 0.2, \"Community\": 0.8}\n        this.allocationPercent = new Map();\n        // stakedAmount: 代币在质押池中质押的数量\n        // Example: {\"Team\": 100, \"Community\": 100}\n        this.stakedAmount = new Map();\n        // stakedAmountDelta: 代币在质押池中质押的数量 增量数据\n        // Example: {\"Team\": 0, \"Community\": 0}\n        this.stakedAmountDelta = new Map();\n        // stakedTotal: 代币在质押池中的总量\n        this.stakedTotal = 0;\n        // freeMoney: 代币可以自由流通使用的数量\n        // Example: {\"Team\": 100, \"Community\": 700}\n        this.freeMoney = new Map();\n        // freeMoneyDelta: 代币可以自由流通使用的数量 增量数据\n        // Example: {\"Team\": 0, \"Community\": 0}\n        this.freeMoneyDelta = new Map();\n        // freeMoneyTotal: 代币可以自由流通的总量\n        this.freeMoneyTotal = 0;\n\n        allocations.forEach(element => {\n            // 获取 allocationPercent 数据\n            this.allocationPercent.set(element.name, Number(element.prop) / 100);    \n\n            this.allocatedAmount.set(element.name, 0);\n            this.allocatedAmountDelta.set(element.name, 0);\n            this.stakedAmount.set(element.name, 0);\n            this.stakedAmountDelta.set(element.name, 0);\n            this.freeMoney.set(element.name, 0);\n            this.freeMoneyDelta.set(element.name, 0);\n        })\n\n        // TODO 还需要考虑 public sale 部分\n        // communityPolicy: token 给社区分配代币的策略\n        this.communityPolicy = {\n            allocations: new Map(), // 社区代币的分配比例 Example: {\"Airdrop\": 0.2, \"Staking\": 0.8}\n            stakingPool:                0, // TODO [DONE, 还可以如何优化？] 如何更新这个 stakingPool? 在实例化 Stake 节点时，根据其 rewardPolicyFrom 参数来更改对应 token 的 stakingPool 属性 \n            stakingRewardLifetime:      Number(community.stakingLifetime),\n            stakingRewardRefreshPeriod: Number(community.stakingRewardRefresh),\n            stakingRewardDefactor:      Number(community.stakingRewardDecreaseFactor) / 100,\n        }\n\n        community.allocations.forEach(element => {\n            this.communityPolicy.allocations.set(element.name, Number(element.prop) / 100);\n        })\n\n        // canVest: token 是否可以 vest \n        this.canVest = 1;\n\n        // 社区的发行策略中可能有直接对外发售/空投的币, 这部分币在一开始就属于 freeMoney\n        if (this.communityPolicy.allocations.has(\"Airdrop\") ) {\n            let amount = Number((this.totalSupply * this.allocationPercent.get(\"Community\") * this.communityPolicy.allocations.get(\"Airdrop\")).toFixed(4));\n            this.freeMoney.set(\"Community\", this.freeMoney.get(\"Community\") + amount);\n            this.freeMoneyTotal += amount;\n        }\n        if (this.communityPolicy.allocations.has(\"PublicSale\")) {\n            let amount = Number((this.totalSupply * this.allocationPercent.get(\"Community\") * this.communityPolicy.allocations.get(\"PublicSale\")).toFixed(4));\n            this.freeMoney.set(\"Community\", this.freeMoney.get(\"Community\") + amount);\n            this.freeMoneyTotal += amount;\n        }\n        this.allocatedAmountDelta.set(\"Community\", Number((this.allocationPercent.get(\"Community\") * this.totalSupply).toFixed(4)));\n    }\n\n    // 执行测算逻辑\n    run(preNode, curDay) {\n\n        // 如果没有前序节点，则不会执行测算逻辑\n        if (preNode == null) {\n            return ;\n        }\n\n        if (preNode.constructor === Token) {\n            // TODO Token 节点的前序节点是 Token 的情况暂时不处理\n            return ;\n        } \n        else if (preNode.constructor === Stake) {\n            // 把前序 Stake 节点分配的 reward 加到自身的 freeMoneyDelta 增量数据上\n            for (let item of this.freeMoneyDelta) {\n                if (preNode.rewardAllocatedDelta.has(item[0])) {\n                    item[1] += preNode.rewardAllocatedDelta.get(item[0]);\n                }\n                \n                this.freeMoneyDelta.set(item[0], item[1]);\n            }\n            \n        } \n        else if (preNode.constructor === Unstake) {\n            // 如果前序 unstake 节点的 unstakeHistory 中有当天的释放记录，则把释放的币加到自身的 freeMoneyDelta 上\n            if (preNode.unstakeHistory.has(curDay)) {\n                for (let item of this.freeMoneyDelta) {\n                    if (preNode.unstakeHistory.get(curDay).has(item[0])) {\n                        item[1] += preNode.unstakeHistory.get(curDay).get(item[0]);\n                    }\n                    this.freeMoneyDelta.set(item[0], item[1]);\n                }\n\n                // TODO vestHistory 暂时不能删除，否则无法在数据可视化面板看到有效数据\n                // preNode.unstakeHistory.delete(curDay);\n            }\n        } \n        else if (preNode.constructor === Vest) {\n            // 如果前序 vest 节点的 vestHistory 中有当天的释放记录，则把释放的币加到自身的 freeMoneyDelta 上\n            if (preNode.vestHistory.has(curDay)) {\n                for (let item of this.freeMoneyDelta) {\n                    if (preNode.vestHistory.get(curDay).has(item[0])) {\n                        item[1] += preNode.vestHistory.get(curDay).get(item[0]);\n                    }\n                    this.freeMoneyDelta.set(item[0], item[1]);\n                }\n\n                // TODO vestHistory 暂时不能删除，否则无法在数据可视化面板看到有效数据\n                // preNode.vestHistory.delete(curDay);\n            }\n        }\n        else {\n            // log 提示报错: 不支持的节点类型\n        }\n\n    }\n\n    // 执行 Delta 数据到 Commit 数据的更新\n    update() {\n        console.log(this.symbol, \"::token: freeMoneyDelta:\", this.freeMoneyDelta);\n        console.log(this.symbol, \"::token: stakedAmountDelta:\", this.stakedAmountDelta);\n        console.log(this.symbol, \"::token: allocatedAmountDelta:\", this.allocatedAmountDelta);\n        // 执行 stakedAmount 的数据更新, 并重置增量数据\n        for(let item of this.stakedAmount.entries()) {\n            item[1] += this.stakedAmountDelta.get(item[0]);\n            this.stakedAmount.set(item[0], item[1]);\n            this.stakedTotal += this.stakedAmountDelta.get(item[0]);\n            this.stakedAmountDelta.set(item[0], 0);\n        }\n\n        // 执行 freeMoney 的数据更新, 并重置增量数据\n        for(let item of this.freeMoney.entries()) {\n            item[1] += this.freeMoneyDelta.get(item[0]);\n            this.freeMoney.set(item[0], item[1]);\n            this.freeMoneyTotal += this.freeMoneyDelta.get(item[0]);\n            this.freeMoneyDelta.set(item[0], 0);\n        }\n\n        // 执行 allocatedAmount 的数据更新，并重置增量数据\n        for(let item of this.allocatedAmount.entries()) {\n            item[1] += this.allocatedAmountDelta.get(item[0]);\n            this.allocatedAmount.set(item[0], item[1]);\n            this.allocatedAmountTotal += this.allocatedAmountDelta.get(item[0]);\n            this.allocatedAmountDelta.set(item[0], 0);\n        }\n       \n        // 对于有发行量的币，需要更新 canVest 参数\n        if (this.totalSupply > 0) {\n            if (this.allocatedAmountTotal < this.totalSupply) {\n                // 当已通过 Vest 分配出去的量小于发行总量时，允许继续 vest\n                this.canVest = 1;\n            } else {\n                // 当已通过 Vest 分配出去的量大于等于发行总量时，不允许继续 vest\n                this.canVest = 0;\n            }\n        }\n\n        console.log(this.symbol, \"::token: stakedAmount:\", this.stakedAmount);\n        \n        console.log(this.symbol, \"::token: stakedTotal:\", this.stakedTotal);\n        console.log(this.symbol, \"::token: freeMoney:\", this.freeMoney);\n    \n        console.log(this.symbol, \"::token: freeMoneyTotal:\", this.freeMoneyTotal);\n        console.log(this.symbol, \"::token: allocatedAmount:\", this.allocatedAmount);\n        \n        console.log(this.symbol, \"::token: allocatedAmountTotal:\", this.allocatedAmountTotal);\n    }\n\n    //  更新已存在的 Token 实例里的参数\n    selfUpdate(symbol, totalSupply, allocations, community) {\n        this.symbol = symbol;\n        this.totalSupply = totalSupply;\n\n        allocations.forEach(element => {\n            // 更新 allocationPercent 数据\n            this.allocationPercent.set(element.name, Number(element.prop) / 100);    \n        })\n\n        this.communityPolicy.stakingRewardLifetime = Number(community.stakingLifetime);\n        this.communityPolicy.stakingRewardRefreshPeriod = Number(community.stakingRewardRefresh);\n        this.communityPolicy.stakingRewardDefactor = Number(community.stakingRewardDecreaseFactor) / 100;\n\n        community.allocations.forEach(element => {\n            this.communityPolicy.allocations.set(element.name, Number(element.prop) / 100);\n        })\n    }\n}\n"]}]}