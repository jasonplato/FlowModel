{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/xufei/Desktop/FlowModel/src/graph/scheduler.js","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/graph/scheduler.js","mtime":1653708835729},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":1653708690128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc2V0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy94dWZlaS9EZXNrdG9wL0Zsb3dNb2RlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy94dWZlaS9EZXNrdG9wL0Zsb3dNb2RlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwpleHBvcnQgdmFyIFNjaGVkdWxlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU2NoZWR1bGVyKGdyYXBoLCBhbnR2Tm9kZXMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY2hlZHVsZXIpOwoKICAgIHRoaXMuZ3JhcGggPSBncmFwaDsgLy8gY291bnRlcmkgJiYgY291bnRlcmog55So5LqO6LCD5bqm5Zmo5Zyo6YGN5Y6GIG1ldGFQYXRoIOS6jOe7tOaVsOe7hOaXtuS9v+eUqAoKICAgIHRoaXMuY291bnRlcmkgPSAwOwogICAgdGhpcy5jb3VudGVyaiA9IDA7CiAgICB0aGlzLm1ldGFQYXRoID0gW107CiAgICB0aGlzLmFudHZOb2RlcyA9IGFudHZOb2RlczsKICAgIHRoaXMuc2V0dXBNZXRhUGF0aCgpOwogIH0gLy8g5LuOIGdyYXBoIOS4reiOt+WPluaVsOaNru+8jOW7uueriyBtZXRhIHBhdGgKCgogIF9jcmVhdGVDbGFzcyhTY2hlZHVsZXIsIFt7CiAgICBrZXk6ICJzZXR1cE1ldGFQYXRoIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cE1ldGFQYXRoKCkgewogICAgICB2YXIgdG1wVGhpcyA9IHRoaXM7CiAgICAgIHZhciB0b2tlbk5vZGVzID0gbmV3IFNldCgpOwogICAgICB0aGlzLmFudHZOb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CiAgICAgICAgLy8gVE9ETyBbRG9uZV0gRmlsdGVyIG91dCBsZWFmIG5vZGVzCiAgICAgICAgaWYgKHZhbHVlLmdldERhdGEoKS50eXBlID09ICJUb2tlbiIgJiYgIXRtcFRoaXMuZ3JhcGguaXNMZWFmTm9kZShrZXkpKSB7CiAgICAgICAgICB0b2tlbk5vZGVzLmFkZChrZXkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRva2VuTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZUlEKSB7CiAgICAgICAgdG1wVGhpcy5nZXRSZWxhdGVkTWV0YVBhdGgodG1wVGhpcy5hbnR2Tm9kZXMuZ2V0KG5vZGVJRCksIFtdLCBuZXcgU2V0KCkpOwogICAgICB9KTsKICAgICAgY29uc29sZS5sb2coInRyYXZlcnNhbCByZXN1bHQ6Iik7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMubWV0YVBhdGgpOwogICAgfSAvLyDojrflj5bku6XkuIDkuKogVG9rZW4g6IqC54K55Li66LW35aeL54K555qE5omA5pyJ5YWD6Lev5b6ECgogIH0sIHsKICAgIGtleTogImdldFJlbGF0ZWRNZXRhUGF0aCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVsYXRlZE1ldGFQYXRoKG5vZGUsIGN1ciwgdmlzaXRlZCkgewogICAgICBpZiAobm9kZS5nZXREYXRhKCkudHlwZSAhPSAiVG9rZW4iICYmIHZpc2l0ZWQuaGFzKG5vZGUuaWQpKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAobm9kZS5nZXREYXRhKCkudHlwZSA9PSAiVG9rZW4iICYmIGN1ci5sZW5ndGggPiAwKSB7CiAgICAgICAgY3VyLnB1c2gobm9kZS5pZCk7CiAgICAgICAgdmFyIHRtcFJlcyA9IFtdOwogICAgICAgIGN1ci5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICAgICAgICB0bXBSZXMucHVzaChlbGVtZW50KTsKICAgICAgICB9KTsKICAgICAgICB0aGlzLm1ldGFQYXRoLnB1c2godG1wUmVzKTsKICAgICAgICBjdXIucG9wKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5ncmFwaC5pc0xlYWZOb2RlKG5vZGUpKSB7CiAgICAgICAgLy8gVE9ETyBwcmludCBvdXQgd2FybmluZyBtZXNzZ2FlCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgZWRnZXMgPSB0aGlzLmdyYXBoLm1vZGVsLmdldE91dGdvaW5nRWRnZXMobm9kZSk7CiAgICAgIGN1ci5wdXNoKG5vZGUuaWQpOwogICAgICB2aXNpdGVkLmFkZChub2RlLmlkKTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWRnZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgbmV4dE5vZGUgPSBlZGdlc1tpXS5nZXRUYXJnZXROb2RlKCk7CiAgICAgICAgdGhpcy5nZXRSZWxhdGVkTWV0YVBhdGgobmV4dE5vZGUsIGN1ciwgdmlzaXRlZCk7CiAgICAgIH0KCiAgICAgIGN1ci5wb3AoKTsKICAgIH0gLy8g5L6d54WnIG1ldGFQYXRoIOeahOaLk+aJkee7k+aehOi/m+ihjOiwg+W6pgogICAgLy8gUGFyYW1ldGVyOiAgIGRheQogICAgLy8gUmV0dXJuOiAgICAgIFtwcmVOb2RlLCBjdXJOb2RlLCBlbmRGbGFnXSAKICAgIC8vICAgICAgICAgICAgICBlbmRGbGFnID09IHRydWUg6KGo56S65omA5pyJIG1ldGEgcGF0aCDpg73lt7Lnu4/pgY3ljobov4fkuoYKCiAgfSwgewogICAga2V5OiAic2NoZWR1bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNjaGVkdWxlKCkgewogICAgICBpZiAodGhpcy5jb3VudGVyaSA+PSB0aGlzLm1ldGFQYXRoLmxlbmd0aCkgewogICAgICAgIHZhciByZXMgPSB7CiAgICAgICAgICBwcmVOb2RlOiBudWxsLAogICAgICAgICAgY3VyTm9kZTogbnVsbCwKICAgICAgICAgIGVuZEZsYWc6IHRydWUKICAgICAgICB9OwogICAgICAgIHRoaXMuY291bnRlcmkgPSAwOwogICAgICAgIHRoaXMuY291bnRlcmogPSAwOwogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0KCiAgICAgIHZhciByZXMgPSB7CiAgICAgICAgcHJlTm9kZTogdGhpcy5jb3VudGVyaiAtIDEgPj0gMCA/IHRoaXMubWV0YVBhdGhbdGhpcy5jb3VudGVyaV1bdGhpcy5jb3VudGVyaiAtIDFdIDogbnVsbCwKICAgICAgICBjdXJOb2RlOiB0aGlzLm1ldGFQYXRoW3RoaXMuY291bnRlcmldW3RoaXMuY291bnRlcmpdLAogICAgICAgIGVuZEZsYWc6IGZhbHNlCiAgICAgIH07CgogICAgICBpZiAodGhpcy5jb3VudGVyaiArIDEgPj0gdGhpcy5tZXRhUGF0aFt0aGlzLmNvdW50ZXJpXS5sZW5ndGgpIHsKICAgICAgICB0aGlzLmNvdW50ZXJpKys7CiAgICAgICAgdGhpcy5jb3VudGVyaiA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb3VudGVyaisrOwogICAgICB9CgogICAgICByZXR1cm4gcmVzOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNjaGVkdWxlcjsKfSgpOw=="},{"version":3,"sources":["/Users/xufei/Desktop/FlowModel/src/graph/scheduler.js"],"names":["Scheduler","graph","antvNodes","counteri","counterj","metaPath","setupMetaPath","tmpThis","tokenNodes","Set","forEach","value","key","getData","type","isLeafNode","add","nodeID","getRelatedMetaPath","get","console","log","node","cur","visited","has","id","length","push","tmpRes","element","pop","edges","model","getOutgoingEdges","i","nextNode","getTargetNode","res","preNode","curNode","endFlag"],"mappings":"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","sourcesContent":["export class Scheduler {\n\n    constructor(graph, antvNodes) {\n        this.graph = graph;\n      \n        // counteri && counterj 用于调度器在遍历 metaPath 二维数组时使用\n        this.counteri = 0;\n        this.counterj = 0;\n        this.metaPath = [];\n        this.antvNodes = antvNodes;\n\n        this.setupMetaPath();\n    }\n\n    // 从 graph 中获取数据，建立 meta path\n    setupMetaPath() {\n        var tmpThis = this;\n        let tokenNodes = new Set();\n\n        this.antvNodes.forEach(function(value, key){\n            // TODO [Done] Filter out leaf nodes\n            if (value.getData().type == \"Token\" && !tmpThis.graph.isLeafNode(key)) {\n                tokenNodes.add(key);\n            }\n        });\n\n        tokenNodes.forEach(nodeID => {\n            tmpThis.getRelatedMetaPath(tmpThis.antvNodes.get(nodeID), [], new Set());\n        });\n\n        console.log(\"traversal result:\");\n        console.log(this.metaPath);\n        \n    } \n\n\n    // 获取以一个 Token 节点为起始点的所有元路径\n    getRelatedMetaPath(node, cur, visited) {\n        if (node.getData().type != \"Token\" && visited.has(node.id)) {\n          return ;\n        }\n  \n        if (node.getData().type == \"Token\" && cur.length > 0) {\n          cur.push(node.id);\n        \n          let tmpRes = [];\n          cur.forEach(element => {\n            tmpRes.push(element);\n          });\n          this.metaPath.push(tmpRes);\n\n          cur.pop();\n          return ;\n        }\n  \n        if (this.graph.isLeafNode(node)) {\n          // TODO print out warning messgae\n          return ;\n        }\n      \n        let edges = this.graph.model.getOutgoingEdges(node);\n        \n        cur.push(node.id);\n        visited.add(node.id);\n        \n        for (let i = 0; i < edges.length; i++) {\n          let nextNode = edges[i].getTargetNode();\n          this.getRelatedMetaPath(nextNode, cur, visited);\n        }\n  \n        cur.pop();\n    }\n\n    // 依照 metaPath 的拓扑结构进行调度\n    // Parameter:   day\n    // Return:      [preNode, curNode, endFlag] \n    //              endFlag == true 表示所有 meta path 都已经遍历过了\n    schedule() {\n        if (this.counteri >= this.metaPath.length ) {\n          var res = {\n            preNode: null,\n            curNode: null,\n            endFlag: true\n          };\n\n          this.counteri = 0;\n          this.counterj = 0;\n\n          return res;\n        }\n\n        var res = {\n            preNode: this.counterj - 1 >= 0 ? this.metaPath[this.counteri][this.counterj - 1] : null,\n            curNode: this.metaPath[this.counteri][this.counterj],\n            endFlag: false\n        };\n\n        if (this.counterj + 1 >= this.metaPath[this.counteri].length) {\n          this.counteri++;\n          this.counterj = 0;\n        } else {\n          this.counterj++;\n        }\n\n        return res;\n    }\n}"]}]}