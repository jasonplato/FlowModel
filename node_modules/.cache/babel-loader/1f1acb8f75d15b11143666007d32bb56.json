{"remainingRequest":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/wangxufei/Desktop/FlowModel/src/api/web3/contracts.js","dependencies":[{"path":"/Users/wangxufei/Desktop/FlowModel/src/api/web3/contracts.js","mtime":1652163070451},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3dhbmd4dWZlaS9EZXNrdG9wL0Zsb3dNb2RlbC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7CmltcG9ydCBGbG93SW5zaWdodEVSQzcyMU5GVCBmcm9tICIuL0Zsb3dJbnNpZ2h0RVJDNzIxTkZULmpzb24iOwp2YXIgY29udHJhY3RfYWRkcmVzcyA9ICIweEE4MzJEQ0Q2RDgwRGY4MjQwM0Y3NDVGOUQ3NmY0RDUyNzU2MEM0NzQiOwp2YXIgY29udHJhY3Q7IC8v6I635Y+WIG1ldGFtYXNrIHByb3ZpZGVyCgpmdW5jdGlvbiBnZXRXZWIzUHJvdmlkZXIoKSB7CiAgaWYgKCF3aW5kb3cud2ViM1Byb3ZpZGVyKSB7CiAgICBpZiAoIXdpbmRvdy5ldGhlcmV1bSkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICB3aW5kb3cud2ViM1Byb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKHdpbmRvdy5ldGhlcmV1bSwgImFueSIpOwogIH0KCiAgcmV0dXJuIHdpbmRvdy53ZWIzUHJvdmlkZXI7Cn0gLy/ov57mjqVtZXRhbWFzawoKCmZ1bmN0aW9uIGNvbm5lY3RNZXRhbWFzayhfeCkgewogIHJldHVybiBfY29ubmVjdE1ldGFtYXNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0gLy/nm5HlkKzotKbmiLfliIfmjaIKCgpmdW5jdGlvbiBfY29ubmVjdE1ldGFtYXNrKCkgewogIF9jb25uZWN0TWV0YW1hc2sgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocHJvdmlkZXIpIHsKICAgIHZhciBhY2NvdW50LCBjaGFpbklkOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBpZiAoIShwcm92aWRlciA9PT0gbnVsbCkpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gd2luZG93LmV0aGVyZXVtLnJlcXVlc3QoewogICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9yZXF1ZXN0QWNjb3VudHMnCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgYWNjb3VudCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gd2luZG93LmV0aGVyZXVtLnJlcXVlc3QoewogICAgICAgICAgICAgIG1ldGhvZDogJ2V0aF9jaGFpbklkJwogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGNoYWluSWQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBjb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3QoY29udHJhY3RfYWRkcmVzcywgRmxvd0luc2lnaHRFUkM3MjFORlQuYWJpLCB3aW5kb3cud2ViM1Byb3ZpZGVyLmdldFNpZ25lcigpKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIGFjY291bnQ6IGFjY291bnQsCiAgICAgICAgICAgICAgY2hhaW5JZDogY2hhaW5JZCwKICAgICAgICAgICAgICBzdGF0dXM6IHRydWUKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEzOwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdjb3VsZCBub3QgZ2V0IGEgd2FsbGV0IGNvbm5lY3Rpb24uJywgX2NvbnRleHQudDApOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDEzXV0pOwogIH0pKTsKICByZXR1cm4gX2Nvbm5lY3RNZXRhbWFzay5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBhY2NvdW50Q2hhbmdlTGlzdGVuZXIoZm4pIHsKICB3aW5kb3cuZXRoZXJldW0ub24oJ2FjY291bnRzQ2hhbmdlZCcsIGZuKTsKfSAvL+iOt+WPluWvueW6lGlkIG5mdOWFg+aVsOaNrgoKCmZ1bmN0aW9uIGdldE5mdE1ldGFkYXRhKF94MikgewogIHJldHVybiBfZ2V0TmZ0TWV0YWRhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfSAvL+iOt+WPlui0puaIt+S9meminQoKCmZ1bmN0aW9uIF9nZXROZnRNZXRhZGF0YSgpIHsKICBfZ2V0TmZ0TWV0YWRhdGEgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGlkKSB7CiAgICB2YXIgdHg7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5nZXRORlRNZXRhZGF0YShpZCk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICB0eCA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgaWYgKCEodHggIT0gIiIpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHN0YXR1czogInN1Y2Nlc3NlZCIsCiAgICAgICAgICAgICAgcmVzcG9uc2U6IHR4CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBzdGF0dXM6ICJmYWlsZWQiLAogICAgICAgICAgICAgIHJlc3BvbnNlOiBudWxsCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKICByZXR1cm4gX2dldE5mdE1ldGFkYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIGdldEJhbGFuY2UoX3gzKSB7CiAgcmV0dXJuIF9nZXRCYWxhbmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0gLy/liJvlu7puZnQKCgpmdW5jdGlvbiBfZ2V0QmFsYW5jZSgpIHsKICBfZ2V0QmFsYW5jZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoYWRkcmVzcykgewogICAgdmFyIGJhbGFuY2U7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cud2ViM1Byb3ZpZGVyLmdldEJhbGFuY2UoYWRkcmVzcyk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBiYWxhbmNlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBldGhlcnMudXRpbHMuZm9ybWF0RXRoZXIoYmFsYW5jZSkpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKICByZXR1cm4gX2dldEJhbGFuY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gY3JlYXRlTkZUKF94NCwgX3g1LCBfeDYsIF94NywgX3g4KSB7CiAgcmV0dXJuIF9jcmVhdGVORlQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfSAvL+a3u+WKoAoKCmZ1bmN0aW9uIF9jcmVhdGVORlQoKSB7CiAgX2NyZWF0ZU5GVCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQodG8sIG5hbWUsIGRlc2MsIGRpc3BsYXlVcmwsIG1ldGFkYXRhSGFzaCkgewogICAgdmFyIHR4OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5jcmVhdGVORlQodG8sIG5hbWUsIGRlc2MsIGRpc3BsYXlVcmwsIG1ldGFkYXRhSGFzaCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICB0eCA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHN0YXR1czogInN1Y2Nlc3NlZCIsCiAgICAgICAgICAgICAgcmVzcG9uc2U6IHR4CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3RhdHVzOiAiZmFpbGVkIiwKICAgICAgICAgICAgICByZXNwb25zZTogbnVsbAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNCwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKICByZXR1cm4gX2NyZWF0ZU5GVC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBhZGRNaW50ZXIoX3g5KSB7CiAgcmV0dXJuIF9hZGRNaW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfSAvL+enu+mZpAoKCmZ1bmN0aW9uIF9hZGRNaW50ZXIoKSB7CiAgX2FkZE1pbnRlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUodXNlcikgewogICAgdmFyIHR4OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5hZGRNaW50ZXIodXNlcik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICB0eCA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHN0YXR1czogInN1Y2Nlc3NlZCIsCiAgICAgICAgICAgICAgcmVzcG9uc2U6IHR4CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDVbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3RhdHVzOiAiZmFpbGVkIiwKICAgICAgICAgICAgICByZXNwb25zZTogbnVsbAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNSwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKICByZXR1cm4gX2FkZE1pbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiByZW1vdmVNaW50ZXIoX3gxMCkgewogIHJldHVybiBfcmVtb3ZlTWludGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9yZW1vdmVNaW50ZXIoKSB7CiAgX3JlbW92ZU1pbnRlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYodXNlcikgewogICAgdmFyIHR4OwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5hZGRNaW50ZXIodXNlcik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICB0eCA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHN0YXR1czogInN1Y2Nlc3NlZCIsCiAgICAgICAgICAgICAgcmVzcG9uc2U6IHR4CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSA3OwogICAgICAgICAgICBfY29udGV4dDYudDAgPSBfY29udGV4dDZbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc3RhdHVzOiAiZmFpbGVkIiwKICAgICAgICAgICAgICByZXNwb25zZTogbnVsbAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNiwgbnVsbCwgW1swLCA3XV0pOwogIH0pKTsKICByZXR1cm4gX3JlbW92ZU1pbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgeyBnZXRXZWIzUHJvdmlkZXIsIGNvbm5lY3RNZXRhbWFzaywgYWNjb3VudENoYW5nZUxpc3RlbmVyLCBnZXRCYWxhbmNlLCBnZXROZnRNZXRhZGF0YSwgY3JlYXRlTkZULCBhZGRNaW50ZXIsIHJlbW92ZU1pbnRlciB9Ow=="},{"version":3,"sources":["/Users/wangxufei/Desktop/FlowModel/src/api/web3/contracts.js"],"names":["ethers","FlowInsightERC721NFT","contract_address","contract","getWeb3Provider","window","web3Provider","ethereum","providers","Web3Provider","connectMetamask","provider","request","method","account","chainId","Contract","abi","getSigner","status","console","error","accountChangeListener","fn","on","getNftMetadata","id","getNFTMetadata","tx","response","getBalance","address","balance","utils","formatEther","createNFT","to","name","desc","displayUrl","metadataHash","addMinter","user","removeMinter"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport FlowInsightERC721NFT from \"./FlowInsightERC721NFT.json\"\nconst contract_address = \"0xA832DCD6D80Df82403F745F9D76f4D527560C474\"\nlet contract;\n//获取 metamask provider\nfunction getWeb3Provider() {\n\n    if (!window.web3Provider) {\n        if (!window.ethereum) {\n            return null;\n        }\n        window.web3Provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    }\n    return window.web3Provider;\n\n\n}\n//连接metamask\nasync function connectMetamask(provider) {\n    if (provider === null) {\n        return false;\n    }\n    try {\n        // 获取当前连接的账户地址:\n        let account = await window.ethereum.request({\n            method: 'eth_requestAccounts',\n        });\n        // 获取当前连接的链ID:\n        let chainId = await window.ethereum.request({\n            method: 'eth_chainId'\n        });\n        contract = new ethers.Contract(contract_address, FlowInsightERC721NFT.abi, window.web3Provider.getSigner())\n        return { account: account, chainId: chainId, status: true };\n    } catch (e) {\n        console.error('could not get a wallet connection.', e);\n        return false;\n    }\n}\n//监听账户切换\nfunction accountChangeListener(fn) {\n    window.ethereum.on('accountsChanged', fn)\n}\n//获取对应id nft元数据\nasync function getNftMetadata(id) {\n    let tx = await contract.getNFTMetadata(id);\n    if (tx != \"\") {\n        return { status: \"successed\", response: tx };\n    } else {\n        return { status: \"failed\", response: null };\n    }\n\n}\n//获取账户余额\nasync function getBalance(address) {\n    const balance = await window.web3Provider.getBalance(address)\n    return ethers.utils.formatEther(balance);\n}\n\n//创建nft\nasync function createNFT(to, name, desc, displayUrl, metadataHash) {\n    try {\n        let tx = await contract.createNFT(to, name, desc, displayUrl, metadataHash);\n        return { status: \"successed\", response: tx }\n    } catch (e) {\n        return { status: \"failed\", response: null }\n    }\n}\n//添加\nasync function addMinter(user) {\n    try {\n        let tx = await contract.addMinter(user);\n        return { status: \"successed\", response: tx }\n    } catch (e) {\n        return { status: \"failed\", response: null }\n    }\n}\n//移除\nasync function removeMinter(user) {\n    try {\n        let tx = await contract.addMinter(user);\n        return { status: \"successed\", response: tx }\n    } catch (e) {\n        return { status: \"failed\", response: null }\n    }\n}\nexport {\n    getWeb3Provider,\n    connectMetamask,\n    accountChangeListener,\n    getBalance,\n    getNftMetadata,\n    createNFT,\n    addMinter,\n    removeMinter\n}"]}]}