{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/xufei/Desktop/FlowModel/src/utils/cryptoUtil.js","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/utils/cryptoUtil.js","mtime":1653708835731},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":1653708690128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3h1ZmVpL0Rlc2t0b3AvRmxvd01vZGVsL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKCnZhciBjcnlwdG8gPSByZXF1aXJlKCJjcnlwdG8iKTsgLy8g5L2/55So5oyH5a6a55qE5Yqg5a+G5Zmo5a+55oyH5a6a5pWw5o2u6L+b6KGM5Yqg5a+GCgoKZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHREYXRhTm9ybWFsKGNpcGhlciwgZGF0YSkgewogIGlmIChkYXRhID09IG51bGwgfHwgY2lwaGVyID09IG51bGwpIHJldHVybiAiTlVMTCI7IC8vIOS9v+eUqOWKoOWvhuWZqOWKoOWvhiBzZWNyZXQgZGF0YQoKICB2YXIgY3J5cHRlZCA9IGNpcGhlci51cGRhdGUoZGF0YSwgInV0ZjgiLCAiaGV4Iik7CiAgY3J5cHRlZCArPSBjaXBoZXIuZmluYWwoImhleCIpOwogIHJldHVybiBjcnlwdGVkOwp9IC8vIOS9v+eUqOaMh+WumueahCBrZXkg5Yib5bu6IEFFUyDliqDlr4blmajlubbop6Plr4bmlbDmja4KCmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0RGF0YU5vcm1hbChlbmNyeXB0ZWQsIGtleSkgewogIHZhciBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KCJhZXMyNTYiLCBrZXksIEJ1ZmZlci5hbGxvYygxNiwgMCkpOwogIHZhciBkZWNyeXB0ZWQgPSBkZWNpcGhlci51cGRhdGUoZW5jcnlwdGVkLCAiaGV4IiwgInV0ZjgiKTsKICBkZWNyeXB0ZWQgKz0gZGVjaXBoZXIuZmluYWwoInV0ZjgiKTsKICByZXR1cm4gZGVjcnlwdGVkOwp9IC8vIOiOt+WPliBFT0Eg5a+55bqU55qE5Yqg5a+G5YWs6ZKlCgpleHBvcnQgZnVuY3Rpb24gZ2V0RU9BUHVia2V5KF94KSB7CiAgcmV0dXJuIF9nZXRFT0FQdWJrZXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfSAvLyBFT0Eg5Yqg5a+G5pWw5o2uCgpmdW5jdGlvbiBfZ2V0RU9BUHVia2V5KCkgewogIF9nZXRFT0FQdWJrZXkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoYWRkcmVzcykgewogICAgdmFyIHJlczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZXRoZXJldW0ucmVxdWVzdCh7CiAgICAgICAgICAgICAgbWV0aG9kOiAnZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXknLAogICAgICAgICAgICAgIHBhcmFtczogW2FkZHJlc3NdIC8vIHlvdSBtdXN0IGhhdmUgYWNjZXNzIHRvIHRoZSBzcGVjaWZpZWQgYWNjb3VudAoKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXMpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRFT0FQdWJrZXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHREYXRhRU9BKF94MiwgX3gzKSB7CiAgcmV0dXJuIF9lbmNyeXB0RGF0YUVPQS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9IC8vIEVPQSDop6Plr4bmlbDmja4KCmZ1bmN0aW9uIF9lbmNyeXB0RGF0YUVPQSgpIHsKICBfZW5jcnlwdERhdGFFT0EgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHB1YiwgZGF0YSkgewogICAgdmFyIGVuY3J5cHRlZE1lc3NhZ2UsIGV0aFV0aWwsIHNpZ1V0aWw7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBlbmNyeXB0ZWRNZXNzYWdlID0gIiI7CiAgICAgICAgICAgIGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKTsKICAgICAgICAgICAgc2lnVXRpbCA9IHJlcXVpcmUoJ0BtZXRhbWFzay9ldGgtc2lnLXV0aWwnKTsKICAgICAgICAgICAgZW5jcnlwdGVkTWVzc2FnZSA9IGV0aFV0aWwuYnVmZmVyVG9IZXgoQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoc2lnVXRpbC5lbmNyeXB0KHsKICAgICAgICAgICAgICBwdWJsaWNLZXk6IHB1YiwKICAgICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICAgIHZlcnNpb246ICd4MjU1MTkteHNhbHNhMjAtcG9seTEzMDUnCiAgICAgICAgICAgIH0pKSwgJ3V0ZjgnKSk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBlbmNyeXB0ZWRNZXNzYWdlKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CiAgcmV0dXJuIF9lbmNyeXB0RGF0YUVPQS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZGVjcnlwdERhdGFFT0EoX3g0LCBfeDUpIHsKICByZXR1cm4gX2RlY3J5cHREYXRhRU9BLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9kZWNyeXB0RGF0YUVPQSgpIHsKICBfZGVjcnlwdERhdGFFT0EgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKGRhdGEsIGFkZHJlc3MpIHsKICAgIHZhciByZXM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuZXRoZXJldW0ucmVxdWVzdCh7CiAgICAgICAgICAgICAgbWV0aG9kOiAnZXRoX2RlY3J5cHQnLAogICAgICAgICAgICAgIHBhcmFtczogW2RhdGEsIGFkZHJlc3NdCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgcmVzID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJkZWNyeXB0IGRhdGE6IiwgcmVzKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHJlcyk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwogIHJldHVybiBfZGVjcnlwdERhdGFFT0EuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/xufei/Desktop/FlowModel/src/utils/cryptoUtil.js"],"names":["crypto","require","encryptDataNormal","cipher","data","crypted","update","final","decryptDataNormal","encrypted","key","decipher","createDecipheriv","Buffer","alloc","decrypted","getEOAPubkey","address","window","ethereum","request","method","params","res","encryptDataEOA","pub","encryptedMessage","ethUtil","sigUtil","bufferToHex","from","JSON","stringify","encrypt","publicKey","version","decryptDataEOA","console","log"],"mappings":";;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AACA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,IAAnC,EAAyC;AAC5C,MAAIA,IAAI,IAAI,IAAR,IAAgBD,MAAM,IAAI,IAA9B,EACE,OAAO,MAAP,CAF0C,CAG5C;;AACA,MAAIE,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAcF,IAAd,EAAoB,MAApB,EAA4B,KAA5B,CAAd;AACAC,EAAAA,OAAO,IAAIF,MAAM,CAACI,KAAP,CAAa,KAAb,CAAX;AAEA,SAAOF,OAAP;AACH,C,CAED;;AACA,OAAO,SAASG,iBAAT,CAA2BC,SAA3B,EAAsCC,GAAtC,EAA2C;AAC9C,MAAMC,QAAQ,GAAGX,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCF,GAAlC,EAAuCG,MAAM,CAACC,KAAP,CAAa,EAAb,EAAiB,CAAjB,CAAvC,CAAjB;AACA,MAAIC,SAAS,GAAGJ,QAAQ,CAACL,MAAT,CAAgBG,SAAhB,EAA2B,KAA3B,EAAkC,MAAlC,CAAhB;AACAM,EAAAA,SAAS,IAAIJ,QAAQ,CAACJ,KAAT,CAAe,MAAf,CAAb;AACA,SAAOQ,SAAP;AACH,C,CAED;;AACA,gBAAsBC,YAAtB;AAAA;AAAA,C,CASA;;;0EATO,iBAA4BC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AACpCC,cAAAA,MAAM,EAAE,4BAD4B;AAEpCC,cAAAA,MAAM,EAAE,CAACL,OAAD,CAF4B,CAEjB;;AAFiB,aAAxB,CADb;;AAAA;AACCM,YAAAA,GADD;AAAA,6CAMIA,GANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBC,cAAtB;AAAA;AAAA,C,CAqBA;;;4EArBO,kBAA8BC,GAA9B,EAAmCrB,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCsB,YAAAA,gBADD,GACoB,EADpB;AAGGC,YAAAA,OAHH,GAGa1B,OAAO,CAAC,iBAAD,CAHpB;AAIG2B,YAAAA,OAJH,GAIa3B,OAAO,CAAC,wBAAD,CAJpB;AAMHyB,YAAAA,gBAAgB,GAAGC,OAAO,CAACE,WAAR,CACfhB,MAAM,CAACiB,IAAP,CACIC,IAAI,CAACC,SAAL,CACIJ,OAAO,CAACK,OAAR,CAAgB;AACZC,cAAAA,SAAS,EAAET,GADC;AAEZrB,cAAAA,IAAI,EAAEA,IAFM;AAGZ+B,cAAAA,OAAO,EAAE;AAHG,aAAhB,CADJ,CADJ,EAQI,MARJ,CADe,CAAnB;AANG,8CAkBIT,gBAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBP,gBAAsBU,cAAtB;AAAA;AAAA;;;4EAAO,kBAA8BhC,IAA9B,EAAoCa,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAClCC,cAAAA,MAAM,EAAE,aAD0B;AAElCC,cAAAA,MAAM,EAAE,CAAClB,IAAD,EAAOa,OAAP;AAF0B,aAAxB,CADb;;AAAA;AACCM,YAAAA,GADD;AAIHc,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bf,GAA7B;AAJG,8CAMIA,GANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const crypto = require(\"crypto\");\n\n// 使用指定的加密器对指定数据进行加密\nexport function encryptDataNormal(cipher, data) {\n    if (data == null || cipher == null)\n      return \"NULL\";\n    // 使用加密器加密 secret data\n    let crypted = cipher.update(data, \"utf8\", \"hex\");\n    crypted += cipher.final(\"hex\");\n\n    return crypted;\n}\n\n// 使用指定的 key 创建 AES 加密器并解密数据\nexport function decryptDataNormal(encrypted, key) {\n    const decipher = crypto.createDecipheriv(\"aes256\", key, Buffer.alloc(16, 0));\n    var decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    return decrypted;\n}\n\n// 获取 EOA 对应的加密公钥\nexport async function getEOAPubkey(address) {\n    let res = await window.ethereum.request({\n        method: 'eth_getEncryptionPublicKey',\n        params: [address], // you must have access to the specified account\n    });\n\n    return res;\n}\n\n// EOA 加密数据\nexport async function encryptDataEOA(pub, data) {\n    let encryptedMessage = \"\";\n    \n    const ethUtil = require('ethereumjs-util');\n    const sigUtil = require('@metamask/eth-sig-util');\n\n    encryptedMessage = ethUtil.bufferToHex(\n        Buffer.from(\n            JSON.stringify(\n                sigUtil.encrypt({\n                    publicKey: pub,\n                    data: data,\n                    version: 'x25519-xsalsa20-poly1305',\n                })\n            ),\n            'utf8'\n        )\n    );\n    return encryptedMessage;\n}\n\n// EOA 解密数据\nexport async function decryptDataEOA(data, address) {\n    let res = await window.ethereum.request({\n          method: 'eth_decrypt',\n          params: [data, address],});\n    console.log(\"decrypt data:\", res);\n\n    return res;\n    //   })\n    //   .then((decryptedMessage) =>\n    //       console.log('The decrypted key is:', decryptedMessage)\n    //   )\n    //   .catch((error) => console.log(error.message));\n}\n"]}]}