{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/xufei/Desktop/FlowModel/src/graph/action.js","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/graph/action.js","mtime":1653708835726},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":1653708690128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xufei/Desktop/FlowModel/src/graph/action.js"],"names":["Token","pow","divide","subtract","chain","NonNegative","StandardNum","mapInit","Action","stakeLabelIDMap","Map","unstakeLabelIDMap","vestLabelIDMap","Stake","label","rewardPolicy","stakeAmount","rewardTotal","Number","rewardLifetime","rewardRefreshPeriod","rewardDefactor","rewardAllocated","rewardAllocatedDelta","rewardAllocatedTotal","rewardList","calculateRewardList","rewardIdx","forEach","element","set","name","prop","console","log","preNode","curDay","constructor","stakedAmountDelta","item","freeMoney","has","delta","get","freeMoneyDelta","stakedTotal","curReward","stakedAmount","Vest","Unstake","totalAmount","totalTime","periodTime","defactor","periodNum","dividend","divisor","releaseBase","multiply","res","i","curPeriod","Math","floor","tmp","push","coolTime","unstakeAmount","unstakeHistory","unStakeRecord","amount","stakeDelta","size","keys","old","undefined","vestAmount","vestHistory","vestPolicy","lockupTime","lockUpTime","releasePeriod","cliff","vestRecord","totalSupply","canVest","allocationPercent","allocatedAmount","allocatedAmountDelta","releaseNumber","releaseAmount"],"mappings":";;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,KAAhC,QAA6C,QAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,qBAAzC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,WAAaC,MAAb,GAEI,kBAAc;AAAA;;AACV;AACA,OAAKC,eAAL,GAAuB,IAAIC,GAAJ,EAAvB,CAFU,CAGV;;AACA,OAAKC,iBAAL,GAAyB,IAAID,GAAJ,EAAzB,CAJU,CAKV;;AACA,OAAKE,cAAL,GAAsB,IAAIF,GAAJ,EAAtB;AACH,CATL;AAYA,WAAaG,KAAb;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAYC,KAAZ,EAAmBC,YAAnB,EAAiCC,WAAjC,EAA8C;AAAA;;AAAA;;AAC1C;AACA,SAAKF,KAAL,GAAaA,KAAb,CAF0C,CAI1C;AACA;AAEA;;AACA,SAAKG,WAAL,GAAmBC,MAAM,CAACH,YAAY,CAACE,WAAd,CAAzB,CAR0C,CAS1C;;AACA,SAAKE,cAAL,GAAsBD,MAAM,CAACH,YAAY,CAACI,cAAd,CAA5B,CAV0C,CAW1C;;AACA,SAAKC,mBAAL,GAA2BF,MAAM,CAACH,YAAY,CAACK,mBAAd,CAAjC,CAZ0C,CAa1C;;AACA,SAAKC,cAAL,GAAsBH,MAAM,CAACH,YAAY,CAACM,cAAd,CAA5B,CAd0C,CAgB1C;AACA;;AACA,SAAKL,WAAL,GAAmB,IAAIN,GAAJ,EAAnB,CAlB0C,CAoB1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,SAAKY,eAAL,GAAuB,IAAIZ,GAAJ,EAAvB,CA/B0C,CAgC1C;;AACA,SAAKa,oBAAL,GAA4B,IAAIb,GAAJ,EAA5B,CAjC0C,CAkC1C;;AACA,SAAKc,oBAAL,GAA4BN,MAAM,CAAC,CAAD,CAAlC,CAnC0C,CAoC1C;;AACA,SAAKO,UAAL,GAAkB,KAAKC,mBAAL,CAAyB,KAAKT,WAA9B,EAA2C,KAAKE,cAAhD,EAAgE,KAAKC,mBAArE,EAA0F,KAAKC,cAA/F,CAAlB,CArC0C,CAsC1C;;AACA,SAAKM,SAAL,GAAiBT,MAAM,CAAC,CAAD,CAAvB;AAEAF,IAAAA,WAAW,CAACY,OAAZ,CAAoB,UAAAC,OAAO,EAAI;AAC3B;AACA,MAAA,KAAI,CAACb,WAAL,CAAiBc,GAAjB,CAAqBD,OAAO,CAACE,IAA7B,EAAmCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAA1D,EAF2B,CAG3B;AACA;AACA;AACA;;;AACA,MAAA,KAAI,CAACV,eAAL,CAAqBQ,GAArB,CAAyBD,OAAO,CAACE,IAAjC,EAAuCb,MAAM,CAAC,CAAD,CAA7C;;AACA,MAAA,KAAI,CAACK,oBAAL,CAA0BO,GAA1B,CAA8BD,OAAO,CAACE,IAAtC,EAA4Cb,MAAM,CAAC,CAAD,CAAlD;AACH,KATD;AAWAe,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,wBAAxB,EAAkD,KAAKG,WAAvD;AAEH,GA1EL,CA4EI;;;AA5EJ;AAAA;AAAA,wBA6EQkB,OA7ER,EA6EiBC,MA7EjB,EA6EyB;AACjB;AACA,UAAID,OAAO,IAAI,IAAf,EAAqB;AACjB;AACH,OAJgB,CAKjB;;;AACA,UAAI,KAAKR,SAAL,IAAkB,KAAKR,cAAvB,IAAyC,KAAKK,oBAAL,IAA6B,KAAKP,WAA/E,EAA4F;AACxF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,UAAIkB,OAAO,CAACE,WAAR,KAAwBrC,KAA5B,EAAmC;AAC/B;AACA;AACA;AACA;AACA;AAEA;AAP+B,mDAQdmC,OAAO,CAACG,iBARM;AAAA;;AAAA;AAQ/B,8DAA4C;AAAA,gBAAnCC,KAAmC;;AACxC,gBAAIJ,OAAO,CAACK,SAAR,CAAkBC,GAAlB,CAAsBF,KAAI,CAAC,CAAD,CAA1B,CAAJ,EAAoC;AAChC;AACA,kBAAIG,MAAK,GAAGpC,WAAW,CAAC6B,OAAO,CAACK,SAAR,CAAkBG,GAAlB,CAAsBJ,KAAI,CAAC,CAAD,CAA1B,IAAiC,KAAKvB,WAAL,CAAiB2B,GAAjB,CAAqBJ,KAAI,CAAC,CAAD,CAAzB,CAAlC,CAAvB;;AACA,kBAAIG,MAAK,IAAI,GAAb,EACI;AACJH,cAAAA,KAAI,CAAC,CAAD,CAAJ,IAAWG,MAAX,CALgC,CAMhC;;AACAP,cAAAA,OAAO,CAACG,iBAAR,CAA0BR,GAA1B,CAA8BS,KAAI,CAAC,CAAD,CAAlC,EAAuCA,KAAI,CAAC,CAAD,CAA3C,EAPgC,CAQhC;;AACAJ,cAAAA,OAAO,CAACS,cAAR,CAAuBd,GAAvB,CAA2BS,KAAI,CAAC,CAAD,CAA/B,EAAoCJ,OAAO,CAACS,cAAR,CAAuBD,GAAvB,CAA2BJ,KAAI,CAAC,CAAD,CAA/B,IAAsCG,MAA1E;AAEH,aAZuC,CAcxC;;AACH,WAvB8B,CA0B/B;;AA1B+B;AAAA;AAAA;AAAA;AAAA;;AA2B/B,YAAIP,OAAO,CAACU,WAAR,GAAsB,CAA1B,EAA6B;AACzB,cAAIC,SAAS,GAAG,KAAKrB,UAAL,CAAgB,KAAKE,SAArB,CAAhB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,yBAAvB,EAAkDgC,SAAlD;;AAFyB,sDAGR,KAAKvB,oBAHG;AAAA;;AAAA;AAGzB,mEAA4C;AAAA,kBAAnCgB,IAAmC;AACxC;AACA,kBAAIG,KAAK,GAAGpC,WAAW,CAAC6B,OAAO,CAACY,YAAR,CAAqBJ,GAArB,CAAyBJ,IAAI,CAAC,CAAD,CAA7B,IAAoCJ,OAAO,CAACU,WAA5C,GAA0DC,SAA3D,CAAvB;AACA,kBAAIJ,KAAK,IAAI,GAAb,EACI;AACJH,cAAAA,IAAI,CAAC,CAAD,CAAJ,IAAWG,KAAX;AAEA,mBAAKnB,oBAAL,CAA0BO,GAA1B,CAA8BS,IAAI,CAAC,CAAD,CAAlC,EAAuCA,IAAI,CAAC,CAAD,CAA3C;AACH;AAXwB;AAAA;AAAA;AAAA;AAAA;;AAazB,eAAKZ,SAAL;AACH;AAEJ,OA3CD,MA2CO,IAAIQ,OAAO,CAACE,WAAR,KAAwBxB,KAA5B,EAAmC;AACtCoB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,iBAAxB,EAA2CqB,OAAO,CAACrB,KAAnD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBW,IAA5B,EAAkC;AACrCf,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,iBAAxB,EAA2CqB,OAAO,CAACrB,KAAnD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBY,OAA5B,EAAqC;AACxChB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,iBAAxB,EAA2CqB,OAAO,CAACrB,KAAnD;AACH;AACJ,KA7JL,CA+JI;;AA/JJ;AAAA;AAAA,6BAgKa;AAEL;AACA;AACA;AACA;AACA;AACA;AAPK,kDASY,KAAKQ,eATjB;AAAA;;AAAA;AASL,+DAAuC;AAAA,cAA9BiB,IAA8B;AACnCA,UAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUlC,WAAW,CAACkC,IAAI,CAAC,CAAD,CAAJ,GAAU,KAAKhB,oBAAL,CAA0BoB,GAA1B,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,CAAX,CAArB;AACA,eAAKjB,eAAL,CAAqBQ,GAArB,CAAyBS,IAAI,CAAC,CAAD,CAA7B,EAAkCrB,MAAM,CAACqB,IAAI,CAAC,CAAD,CAAL,CAAxC;AACA,eAAKf,oBAAL,GAA4BnB,WAAW,CAAC,KAAKmB,oBAAL,GAA4B,KAAKD,oBAAL,CAA0BoB,GAA1B,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,CAA7B,CAAvC;AACA,eAAKhB,oBAAL,CAA0BO,GAA1B,CAA8BS,IAAI,CAAC,CAAD,CAAlC,EAAuCrB,MAAM,CAAC,CAAD,CAA7C;AACH;AAdI;AAAA;AAAA;AAAA;AAAA;;AAgBLe,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,2BAAxB,EAAqD,KAAKQ,eAA1D;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,gCAAxB,EAA0D,KAAKS,oBAA/D;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAwB,gCAAxB,EAA0D,KAAKU,oBAA/D;AACH,KAnLL,CAqLI;AACA;;AAtLJ;AAAA;AAAA,wCAuLwB0B,WAvLxB,EAuLqCC,SAvLrC,EAuLgDC,UAvLhD,EAuL4DC,QAvL5D,EAuLsE;AAC9D;AACA,UAAIH,WAAW,IAAI,CAAnB,EAAuB;AACnB,eAAO,CAAC,CAAD,CAAP;AACH;;AACD,UAAIC,SAAS,IAAI,CAAjB,EAAqB;AACjB,eAAO,CAACD,WAAD,CAAP;AACH;;AACD,UAAIE,UAAU,IAAI,CAAlB,EAAqB;AACjB,eAAO,CAACF,WAAD,CAAP;AACH;;AACD,UAAIG,QAAQ,IAAI,CAAhB,EAAmB;AACf,eAAO,CAACH,WAAD,CAAP;AACH;;AACD,UAAMI,SAAS,GAAGpD,MAAM,CAACiD,SAAD,EAAYC,UAAZ,CAAxB;AACA,UAAMG,QAAQ,GAAGpD,QAAQ,CAAC,CAAD,EAAIkD,QAAJ,CAAzB;AACA,UAAMG,OAAO,GAAGrD,QAAQ,CAAC,CAAD,EAAIF,GAAG,CAACoD,QAAD,EAAWC,SAAX,CAAP,CAAxB;AACA,UAAIG,WAAW,GAAGnD,WAAW,CAACF,KAAK,CAAC8C,WAAD,CAAL,CAAmBQ,QAAnB,CAA4BH,QAA5B,EAAsCrD,MAAtC,CAA6CsD,OAA7C,CAAD,CAA7B;;AACA,UAAIH,QAAQ,IAAI,GAAhB,EAAqB;AACjBI,QAAAA,WAAW,GAAGnD,WAAW,CAACF,KAAK,CAAC8C,WAAD,CAAL,CAAmBhD,MAAnB,CAA0BoD,SAA1B,CAAD,CAAzB;AACH;;AAED,UAAIK,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAeA,CAAC,GAAGT,SAAnB,EAA8BS,CAAC,EAA/B,EAAmC;AAC/B,YAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGR,UAAf,CAAhB;AACA,YAAIY,GAAG,GAAG1D,WAAW,CAACmD,WAAW,GAAGxD,GAAG,CAACoD,QAAD,EAAWQ,SAAX,CAAjB,GAAyCT,UAA1C,CAArB;AACAO,QAAAA,GAAG,CAACM,IAAJ,CAASD,GAAT;AAEH;;AACD,aAAOL,GAAP;AACH,KArNL,CAuNI;AACA;;AAxNJ;AAAA;AAAA,+BAyNe7C,KAzNf,EAyNsBC,YAzNtB,EAyNoCC,WAzNpC,EAyNiD;AAAA;;AACzC,WAAKF,KAAL,GAAaA,KAAb,CADyC,CAEzC;AACA;;AACA,WAAKK,cAAL,GAAsBD,MAAM,CAACH,YAAY,CAACI,cAAd,CAA5B;AACA,WAAKC,mBAAL,GAA2BF,MAAM,CAACH,YAAY,CAACK,mBAAd,CAAjC;AACA,WAAKC,cAAL,GAAsBH,MAAM,CAACH,YAAY,CAACM,cAAd,CAA5B;AAEAL,MAAAA,WAAW,CAACY,OAAZ,CAAoB,UAAAC,OAAO,EAAI;AAC3B;AACA,QAAA,MAAI,CAACb,WAAL,CAAiBc,GAAjB,CAAqBD,OAAO,CAACE,IAA7B,EAAmCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAA1D;AACH,OAHD;AAIH;AArOL;;AAAA;AAAA;AAyOA,WAAaiB,OAAb;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAYnC,KAAZ,EAAmBoD,QAAnB,EAA6BC,aAA7B,EAA4C;AAAA;;AAAA;;AACxC;AACA,SAAKrD,KAAL,GAAaA,KAAb,CAFwC,CAGxC;;AACA,SAAKoD,QAAL,GAAgBhD,MAAM,CAACgD,QAAD,CAAtB,CAJwC,CAMxC;AACA;;AACA,SAAKC,aAAL,GAAqB,IAAIzD,GAAJ,EAArB,CARwC,CASxC;AACA;;AACA,SAAK0D,cAAL,GAAsB,IAAI1D,GAAJ,EAAtB;AAEAyD,IAAAA,aAAa,CAACvC,OAAd,CAAsB,UAAAC,OAAO,EAAI;AAC7B,MAAA,MAAI,CAACsC,aAAL,CAAmBrC,GAAnB,CAAuBD,OAAO,CAACE,IAA/B,EAAqCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAA5D;AACH,KAFD;AAGH,GA5BL,CA8BI;;;AA9BJ;AAAA;AAAA,wBA+BQG,OA/BR,EA+BiBC,MA/BjB,EA+ByB;AACjB;AACA,UAAID,OAAO,IAAI,IAAf,EAAqB;AACjB;AACH,OAJgB,CAKjB;AACA;AACA;AACA;;;AAEA,UAAIA,OAAO,CAACE,WAAR,KAAwBrC,KAA5B,EAAmC;AAC/B;AACA,YAAIqE,aAAa,GAAG,IAAI3D,GAAJ,EAApB;;AAF+B,oDAGd,KAAKyD,aAHS;AAAA;;AAAA;AAG/B,iEAAqC;AAAA,gBAA5B5B,MAA4B;AACjC,gBAAI+B,MAAM,GAAGhE,WAAW,CAAC6B,OAAO,CAACY,YAAR,CAAqBJ,GAArB,CAAyBJ,MAAI,CAAC,CAAD,CAA7B,IAAoCA,MAAI,CAAC,CAAD,CAAzC,CAAxB,CADiC,CAEjC;;AACA,gBAAI+B,MAAM,IAAI,GAAd,EAAmB;AACf;AACA;AACH;;AAED,gBAAIC,UAAU,GAAGpC,OAAO,CAACG,iBAAR,CAA0BK,GAA1B,CAA8BJ,MAAI,CAAC,CAAD,CAAlC,IAAyC+B,MAA1D;AACAnC,YAAAA,OAAO,CAACG,iBAAR,CAA0BR,GAA1B,CAA8BS,MAAI,CAAC,CAAD,CAAlC,EAAuCgC,UAAvC;AACAF,YAAAA,aAAa,CAACvC,GAAd,CAAkBS,MAAI,CAAC,CAAD,CAAtB,EAA2B+B,MAA3B;AACH,WAd8B,CAgB/B;;AAhB+B;AAAA;AAAA;AAAA;AAAA;;AAiB/B,YAAGD,aAAa,CAACG,IAAd,GAAqB,CAAxB,EAA0B;AAAA,sDAELH,aAFK;AAAA;;AAAA;AAEtB,mEAAgC;AAAA,kBAAvB9B,IAAuB;;AAC5B,kBAAI,CAAC,KAAK6B,cAAL,CAAoB3B,GAApB,CAAwBL,MAAM,GAAG,KAAK8B,QAAtC,CAAL,EAAsD;AAClD;AACA,qBAAKE,cAAL,CAAoBtC,GAApB,CAAwBM,MAAM,GAAG,KAAK8B,QAAtC,EAAgD3D,OAAO,CAAC,KAAK4D,aAAL,CAAmBM,IAAnB,EAAD,CAAvD;AACH;;AAED,kBAAIC,GAAG,GAAG,KAAKN,cAAL,CAAoBzB,GAApB,CAAwBP,MAAM,GAAG,KAAK8B,QAAtC,EAAgDvB,GAAhD,CAAoDJ,IAAI,CAAC,CAAD,CAAxD,CAAV;AACA,kBAAImC,GAAG,IAAIC,SAAX,EAAsBD,GAAG,GAAGxD,MAAM,CAAC,CAAD,CAAZ;AACtBwD,cAAAA,GAAG,IAAInC,IAAI,CAAC,CAAD,CAAX,CAR4B,CAU5B;;AACA,mBAAK6B,cAAL,CAAoBzB,GAApB,CAAwBP,MAAM,GAAG,KAAK8B,QAAtC,EAAgDpC,GAAhD,CAAoDS,IAAI,CAAC,CAAD,CAAxD,EAA6DmC,GAA7D;AACH;AAdqB;AAAA;AAAA;AAAA;AAAA;AAgBzB;AAGJ,OApCD,MAoCO,IAAIvC,OAAO,CAACE,WAAR,KAAwBxB,KAA5B,EAAmC;AACtCoB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBW,IAA5B,EAAkC;AACrCf,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBY,OAA5B,EAAqC;AACxChB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AACH;AACJ,KAtFL,CAwFI;;AAxFJ;AAAA;AAAA,6BAyFa;AACLmB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,qBAAvB,EAA8C,KAAKsD,cAAnD;AACH,KA3FL,CA6FI;AACA;;AA9FJ;AAAA;AAAA,+BA+FetD,KA/Ff,EA+FsBoD,QA/FtB,EA+FgCC,aA/FhC,EA+F+C;AAAA;;AACvC,WAAKrD,KAAL,GAAaA,KAAb;AACA,WAAKoD,QAAL,GAAgBhD,MAAM,CAACgD,QAAD,CAAtB;AACAC,MAAAA,aAAa,CAACvC,OAAd,CAAsB,UAAAC,OAAO,EAAI;AAC7B,QAAA,MAAI,CAACsC,aAAL,CAAmBrC,GAAnB,CAAuBD,OAAO,CAACE,IAA/B,EAAqCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAA5D;AACH,OAFD;AAGH;AArGL;;AAAA;AAAA;AAwGA,WAAagB,IAAb;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAYlC,KAAZ,EAAmB8D,UAAnB,EAA+B;AAAA;;AAAA;;AAC3B;AACA,SAAK9D,KAAL,GAAaA,KAAb,CAF2B,CAG3B;AACA;;AACA,SAAK+D,WAAL,GAAmB,IAAInE,GAAJ,EAAnB,CAL2B,CAM3B;AACA;;AACA,SAAKkE,UAAL,GAAkB,IAAIlE,GAAJ,EAAlB,CAR2B,CAS3B;AACA;;AACA,SAAKoE,UAAL,GAAkB,IAAIpE,GAAJ,EAAlB;AAEAkE,IAAAA,UAAU,CAAChD,OAAX,CAAmB,UAAAC,OAAO,EAAI;AAC1B,MAAA,MAAI,CAAC+C,UAAL,CAAgB9C,GAAhB,CAAoBD,OAAO,CAACE,IAA5B,EAAkCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAAzD;;AACA,MAAA,MAAI,CAAC8C,UAAL,CAAgBhD,GAAhB,CAAoBD,OAAO,CAACE,IAA5B,EAAkC;AAACgD,QAAAA,UAAU,EAAE7D,MAAM,CAACW,OAAO,CAACmD,UAAT,CAAnB;AAAyCC,QAAAA,aAAa,EAAE/D,MAAM,CAACW,OAAO,CAACoD,aAAT,CAA9D;AAAuFC,QAAAA,KAAK,EAAEhE,MAAM,CAACW,OAAO,CAACqD,KAAT;AAApG,OAAlC;AACH,KAHD;AAKH,GAhEL,CAkEI;;;AAlEJ;AAAA;AAAA,wBAmEQ/C,OAnER,EAmEiBC,MAnEjB,EAmEyB;AACjB;AACA,UAAID,OAAO,IAAI,IAAf,EAAqB;AACjB;AACH,OAJgB,CAKjB;AACA;AACA;AACA;;;AAEA,UAAIA,OAAO,CAACE,WAAR,KAAwBrC,KAA5B,EAAmC;AAC/B,YAAImF,UAAU,GAAG,IAAIzE,GAAJ,EAAjB;;AACA,YAAGyB,OAAO,CAACiD,WAAR,GAAsB,CAAtB,IAA2BjD,OAAO,CAACkD,OAAR,IAAmB,CAAjD,EAAoD;AAChD;AADgD,sDAE/B,KAAKT,UAF0B;AAAA;;AAAA;AAEhD,mEAAkC;AAAA,kBAAzBrC,IAAyB;AAC9B,kBAAI+B,MAAM,GAAGhE,WAAW,CAAC,CAAC6B,OAAO,CAACmD,iBAAR,CAA0B3C,GAA1B,CAA8BJ,IAAI,CAAC,CAAD,CAAlC,IAAyCJ,OAAO,CAACiD,WAAjD,GAA+DjD,OAAO,CAACoD,eAAR,CAAwB5C,GAAxB,CAA4BJ,IAAI,CAAC,CAAD,CAAhC,CAAhE,IAAwGA,IAAI,CAAC,CAAD,CAA7G,CAAxB,CAD8B,CAE9B;;AACA,kBAAI+B,MAAM,IAAI,GAAd,EAAmB;AACf;AACA;AACH;;AAEDnC,cAAAA,OAAO,CAACqD,oBAAR,CAA6B1D,GAA7B,CAAiCS,IAAI,CAAC,CAAD,CAArC,EAA0CJ,OAAO,CAACqD,oBAAR,CAA6B7C,GAA7B,CAAiCJ,IAAI,CAAC,CAAD,CAArC,IAA4C+B,MAAtF;AAEAa,cAAAA,UAAU,CAACrD,GAAX,CAAeS,IAAI,CAAC,CAAD,CAAnB,EAAwB+B,MAAxB;AACH;AAb+C;AAAA;AAAA;AAAA;AAAA;AAenD,SAfD,MAeO,IAAInC,OAAO,CAACiD,WAAR,IAAuB,CAA3B,EAA+B;AAClC;AADkC,sDAEjB,KAAKR,UAFY;AAAA;;AAAA;AAElC,mEAAkC;AAAA,kBAAzBrC,MAAyB;;AAC9B,kBAAI+B,OAAM,GAAGhE,WAAW,CAAC6B,OAAO,CAACK,SAAR,CAAkBG,GAAlB,CAAsBJ,MAAI,CAAC,CAAD,CAA1B,IAAiCA,MAAI,CAAC,CAAD,CAAtC,CAAxB,CAD8B,CAE9B;;;AACA,kBAAI+B,OAAM,IAAI,GAAd,EAAmB;AACf;AACA;AACH;;AAEDnC,cAAAA,OAAO,CAACS,cAAR,CAAuBd,GAAvB,CAA2BS,MAAI,CAAC,CAAD,CAA/B,EAAoCJ,OAAO,CAACS,cAAR,CAAuBD,GAAvB,CAA2BJ,MAAI,CAAC,CAAD,CAA/B,IAAsC+B,OAA1E;AACAa,cAAAA,UAAU,CAACrD,GAAX,CAAeS,MAAI,CAAC,CAAD,CAAnB,EAAwB+B,OAAxB;AACH;AAZiC;AAAA;AAAA;AAAA;AAAA;AAcrC,SA/B8B,CAgC/B;;;AACA,YAAGa,UAAU,CAACX,IAAX,GAAkB,CAArB,EAAuB;AAAA,sDAEFW,UAFE;AAAA;;AAAA;AAEnB,mEAA6B;AAAA,kBAApB5C,MAAoB;AACzB;AACA,kBAAI0C,aAAa,GAAG,KAAKH,UAAL,CAAgBnC,GAAhB,CAAoBJ,MAAI,CAAC,CAAD,CAAxB,EAA6B0C,aAAjD;AACA,kBAAIQ,aAAa,GAAG3B,IAAI,CAACC,KAAL,CAAW,KAAKe,UAAL,CAAgBnC,GAAhB,CAAoBJ,MAAI,CAAC,CAAD,CAAxB,EAA6BwC,UAA7B,GAA0CE,aAArD,CAApB;AACA,kBAAIC,KAAK,GAAG,KAAKJ,UAAL,CAAgBnC,GAAhB,CAAoBJ,MAAI,CAAC,CAAD,CAAxB,EAA6B2C,KAAzC;AACA,kBAAIA,KAAK,IAAI,CAAb,EAAgBO,aAAa;AAC7B,kBAAIC,aAAa,GAAGpF,WAAW,CAACiC,MAAI,CAAC,CAAD,CAAJ,GAAUkD,aAAX,CAA/B;;AAEA,kBAAI,KAAKX,UAAL,CAAgBnC,GAAhB,CAAoBJ,MAAI,CAAC,CAAD,CAAxB,EAA6BwC,UAA7B,IAA2C,CAA3C,IAAgDE,aAAa,IAAI,CAArE,EAAyE;AACrEQ,gBAAAA,aAAa,GAAG,CAAhB;AACAC,gBAAAA,aAAa,GAAGnD,MAAI,CAAC,CAAD,CAApB;AACH;;AAED,mBAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,aAApB,EAAmC7B,CAAC,EAApC,EAAwC;AACpC;AACA,oBAAI,CAAC,KAAKiB,WAAL,CAAiBpC,GAAjB,CAAqBL,MAAM,GAAG8C,KAAT,GAAiBtB,CAAC,GAAGqB,aAA1C,CAAL,EAA+D;AAC3D;AACA,uBAAKJ,WAAL,CAAiB/C,GAAjB,CAAqBM,MAAM,GAAG8C,KAAT,GAAiBtB,CAAC,GAAGqB,aAA1C,EAAyD1E,OAAO,CAAC,KAAKqE,UAAL,CAAgBH,IAAhB,EAAD,CAAhE;AACH,iBALmC,CAMpC;;;AACA,oBAAIC,GAAG,GAAG,KAAKG,WAAL,CAAiBlC,GAAjB,CAAqBP,MAAM,GAAG8C,KAAT,GAAiBtB,CAAC,GAAGqB,aAA1C,CAAV;AACAP,gBAAAA,GAAG,CAAC5C,GAAJ,CAAQS,MAAI,CAAC,CAAD,CAAZ,EAAiB,CAACmC,GAAG,CAAC/B,GAAJ,CAAQJ,MAAI,CAAC,CAAD,CAAZ,KAAoBoC,SAApB,GAAgC,CAAhC,GAAoCD,GAAG,CAAC/B,GAAJ,CAAQJ,MAAI,CAAC,CAAD,CAAZ,CAArC,IAAyDmD,aAA1E;AACA,qBAAKb,WAAL,CAAiB/C,GAAjB,CAAqBM,MAAM,GAAG8C,KAAT,GAAiBtB,CAAC,GAAGqB,aAA1C,EAAyDP,GAAzD;AACH,eAvBwB,CAyBzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEH;AArDkB;AAAA;AAAA;AAAA;AAAA;AAuDtB;AAEJ,OA1FD,MA0FO,IAAIvC,OAAO,CAACE,WAAR,KAAwBxB,KAA5B,EAAmC;AACtCoB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBW,IAA5B,EAAkC;AACrCf,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AAEH,OAHM,MAGA,IAAIqB,OAAO,CAACE,WAAR,KAAwBY,OAA5B,EAAqC;AACxChB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,iBAAvB,EAA0CqB,OAAO,CAACrB,KAAlD;AACH;AAEJ,KAjLL,CAmLI;;AAnLJ;AAAA;AAAA,6BAoLa;AACLmB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAjB,EAAuB,kBAAvB,EAA2C,KAAK+D,WAAhD;AACH,KAtLL,CAwLI;AACA;;AAzLJ;AAAA;AAAA,+BA0Le/D,KA1Lf,EA0LsB8D,UA1LtB,EA0LkC;AAAA;;AAC1B,WAAK9D,KAAL,GAAaA,KAAb;AACA8D,MAAAA,UAAU,CAAChD,OAAX,CAAmB,UAAAC,OAAO,EAAI;AAC1B,QAAA,MAAI,CAAC+C,UAAL,CAAgB9C,GAAhB,CAAoBD,OAAO,CAACE,IAA5B,EAAkCb,MAAM,CAACW,OAAO,CAACG,IAAT,CAAN,GAAuB,GAAzD;;AACA,QAAA,MAAI,CAAC8C,UAAL,CAAgBhD,GAAhB,CAAoBD,OAAO,CAACE,IAA5B,EAAkC;AAACgD,UAAAA,UAAU,EAAE7D,MAAM,CAACW,OAAO,CAACmD,UAAT,CAAnB;AAAyCC,UAAAA,aAAa,EAAE/D,MAAM,CAACW,OAAO,CAACoD,aAAT,CAA9D;AAAuFC,UAAAA,KAAK,EAAEhE,MAAM,CAACW,OAAO,CAACqD,KAAT;AAApG,SAAlC;AACH,OAHD;AAKH;AAjML;;AAAA;AAAA","sourcesContent":["import { Token } from \"./token\";\nimport { pow, divide, subtract, chain } from 'mathjs';\nimport { NonNegative, StandardNum } from \"../utils/numberUtil\";\nimport { mapInit } from \"../utils/mapInit\";\nexport class Action {\n\n    constructor() {\n        // stakeLabelIDMap <key: nodeLabel, value: nodeID> : stake 节点的 label(交互页面可由用户自定义的文本名) 与 id 映射表\n        this.stakeLabelIDMap = new Map();\n        // stakeLabelIDMap <key: nodeLabel, value: nodeID> : unstake 节点的 label 与 id 映射表\n        this.unstakeLabelIDMap = new Map();\n        // stakeLabelIDMap <key: nodeLabel, value: nodeID> : vest 节点的 label 与 id 映射表\n        this.vestLabelIDMap = new Map();\n    }\n}\n\nexport class Stake {\n\n    // constructor\n    // params:\n    //      stakeToken: \"Apex\",\n    //      rewardToken: \"esApex\"\n    //      rewardPolicy {\n    //          BigInt rewardTotal;\n    //          int rewardLifetime;\n    //          int rewardRefreshPeriod;\n    //          float rewardDefactor;\n    //      },\n    //      stakeAmount: [\n    //          { name: \"Team\", prop: 0, class: \"team-slider\" },\n    //          { name: \"Investor\", prop: 0, class: \"investor-slider\" },\n    //          { name: \"Advisor\", prop: 0, class: \"advisor-slider\" },\n    //          { name: \"Foundation\", prop: 0, class: \"foundation-slider\" },\n    //          { name: \"Community\", prop: 0, class: \"community-slider\" },\n    //      ],\n    // TODO rewardToken, stakeToke 是否必要？\n    constructor(label, rewardPolicy, stakeAmount) {\n        // label: 用户在前端交互页面为节点自定义的名字\n        this.label = label;\n\n        // stakeToken: stake 支持的质押币种\n        // rewardToken: stake 的质押奖励币种\n\n        // rewardTotal: stake 产生的质押奖励币总量\n        this.rewardTotal = Number(rewardPolicy.rewardTotal);\n        // rewardLifetime: stake 产生质押奖励的总时长\n        this.rewardLifetime = Number(rewardPolicy.rewardLifetime);\n        // rewardRefreshPeriod: stake 产生质押奖励的周期\n        this.rewardRefreshPeriod = Number(rewardPolicy.rewardRefreshPeriod);\n        // rewardDefactor: stake 质押奖励的衰减因子\n        this.rewardDefactor = Number(rewardPolicy.rewardDefactor);\n\n        // stakeAmount: stake 的数量(以百分比的形式)\n        // Example: {\"Team\": 0.8, \"Community\": 0.8}\n        this.stakeAmount = new Map();\n\n        // TODO inPoolAmount 相关参数暂时不需要了，因为以 Token 节点的 stakedAmount 为准\n        // inPoolAmount: stake 质押池中已经有的质押币数量\n        // Example: {\"Team\": 100, \"Community\": 100}\n        // this.inPoolAmount = new Map();\n        // inPoolAmountDelta: stake 质押池中已经有的质押币数量 增量数据\n        // this.inPoolAmountDelta = new Map();\n        // inPoolAmountTotal: stake 质押池中已有的质押币总量\n        // this.inPoolAmountTotal = 0;\n\n        // rewardAllocated: stake 已经产生的奖励分配\n        // Example: {\"Team\": 10000, \"Community\": 10000}\n        this.rewardAllocated = new Map();\n        // rewardAllocatedDelta: stake 已经产生的奖励分配 增量数据\n        this.rewardAllocatedDelta = new Map();\n        // rewardAllocatedTotal: stake 已经产生的奖励总量\n        this.rewardAllocatedTotal = Number(0);\n        // rewardList: 保存了每天可以释放的 reward 量\n        this.rewardList = this.calculateRewardList(this.rewardTotal, this.rewardLifetime, this.rewardRefreshPeriod, this.rewardDefactor);\n        // rewardIdx: 记录当前奖励释放的进度\n        this.rewardIdx = Number(0);\n\n        stakeAmount.forEach(element => {\n            // 获取 stakeAmount 数据\n            this.stakeAmount.set(element.name, Number(element.prop) / 100);\n            // inPoolAmount 表示已经质押在池子里的数量\n            // this.inPoolAmount.set(element.name, 0);\n            // this.inPoolAmountDelta.set(element.name, 0);\n            // rewardAllocated 表示已经分配的收益\n            this.rewardAllocated.set(element.name, Number(0));\n            this.rewardAllocatedDelta.set(element.name, Number(0));\n        })\n\n        console.log(this.label, \"::Stake: reward total:\", this.rewardTotal);\n        \n    }\n\n    // 执行测算逻辑\n    run(preNode, curDay) {\n        // 如果没有前序节点，则不会执行测算逻辑\n        if (preNode == null) {\n            return ;\n        }\n        // 当池子的奖励计划已经结束，或者分配出去的奖励已经达到初始设置的奖励总额时，不再执行当前 stake 的测算逻辑\n        if (this.rewardIdx >= this.rewardLifetime || this.rewardAllocatedTotal >= this.rewardTotal) {\n            // log 提示 stake 已不会继续释放奖励\n            // TODO 把 stake 池子里已有的 stakedAmount 释放出去成为 freeMoney. 如何避免 Unstake 那边的操作重复取出？\n            // if (preNode.constructor === Token) {\n            //     for (let item of preNode.stakedAmount) {\n                    \n            //         if (item[1] <= 0)\n            //             continue;\n            //         // 从前序 token 节点中减去 stake 的全部数量\n            //         let stakeDelta = preNode.stakedAmountDelta.get(item[0]);\n            //         console.log(this.label, \"::Stake: stakeAmount minus:\", item[1]);\n            //         stakeDelta -= item[1];\n            //         preNode.stakedAmountDelta.set(item[0], stakeDelta);\n            //         // 往前序 token 节点的 freeMoneyDelta 加上 stake 的全部数量\n            //         let freeMoneyDelta = preNode.freeMoneyDelta.get(item[0]);\n            //         freeMoneyDelta += item[1];\n            //         preNode.freeMoneyDelta.set(item[0], freeMoneyDelta);\n            //     }\n            // }\n            return ;\n        }\n\n        if (preNode.constructor === Token) {\n            // TODO [Done, StakeAmount 统一放在 Token 节点中. Stake 和 Unstake 操作都基于 Token 节点的 StakeAmount 数据, 但还不确定存在什么问题] Stake 如何感知到 Unstake 操作的影响\n            // this.inPoolAmount = preNode.stakedAmount;\n            // this.inPoolAmountDelta = preNode.stakedAmountDelta;\n            // this.inPoolAmountTotal = preNode.stakedTotal;\n            // console.log(this.label, \"::pre Node is: \", preNode.symbol);\n\n            // 当天加入 stake 池子中的 token 量\n            for (let item of preNode.stakedAmountDelta) {\n                if (preNode.freeMoney.has(item[0])) {\n                    // TODO [Done] 如果增量数据为 0，就跳过\n                    let delta = StandardNum(preNode.freeMoney.get(item[0]) * this.stakeAmount.get(item[0]));\n                    if (delta <= 0.0)\n                        continue;\n                    item[1] += delta;\n                    // 把上述当天加入 stake 池子的 token 量累加到前序节点的 stakedAmount 上\n                    preNode.stakedAmountDelta.set(item[0], item[1]);\n                    // 把上述当天加入 stake 池子的 token 从前序节点中减去\n                    preNode.freeMoneyDelta.set(item[0], preNode.freeMoneyDelta.get(item[0]) - delta);\n                    \n                }\n                \n                // this.inPoolAmountDelta.set(item[0], item[1]);\n            }\n\n\n            // 当天 stake 池子产生的奖励量, 只有当 inPoolAmountTotal > 0 时才会有奖励分配\n            if (preNode.stakedTotal > 0) {\n                let curReward = this.rewardList[this.rewardIdx];\n                console.log(this.label,\"::Stake: curent reward:\", curReward);\n                for (let item of this.rewardAllocatedDelta) {\n                    // TODO [Done] 增量数据如果为0，就跳过\n                    let delta = StandardNum(preNode.stakedAmount.get(item[0]) / preNode.stakedTotal * curReward);\n                    if (delta <= 0.0)\n                        continue;\n                    item[1] += delta;\n    \n                    this.rewardAllocatedDelta.set(item[0], item[1]);\n                }\n\n                this.rewardIdx++;\n            }\n            \n        } else if (preNode.constructor === Stake) {\n            console.log(this.label, \"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Vest) {\n            console.log(this.label, \"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Unstake) {\n            console.log(this.label, \"::pre Node is: \", preNode.label);\n        }\n    }\n\n    // 执行 Delta 数据到 Commit 数据的更新\n    update() {\n\n        // for (let item of this.inPoolAmount) {\n        //     item[1] += this.inPoolAmountDelta.get(item[0]);\n        //     this.inPoolAmount.set(item[0], item[1]);\n        //     this.inPoolAmountTotal += this.inPoolAmountDelta.get(item[0]);\n        //     this.inPoolAmountDelta.set(item[0], 0);\n        // }\n\n        for (let item of this.rewardAllocated) {\n            item[1] = NonNegative(item[1] + this.rewardAllocatedDelta.get(item[0]));\n            this.rewardAllocated.set(item[0], Number(item[1]));\n            this.rewardAllocatedTotal = NonNegative(this.rewardAllocatedTotal + this.rewardAllocatedDelta.get(item[0]));\n            this.rewardAllocatedDelta.set(item[0], Number(0));\n        }\n\n        console.log(this.label, \"::Stake: rewardAllocated:\", this.rewardAllocated);\n        console.log(this.label, \"::Stake: rewardAllocatedDelta:\", this.rewardAllocatedDelta);\n        console.log(this.label, \"::Stake: rewardAllocatedTotal:\", this.rewardAllocatedTotal);\n    }\n\n    // 计算出当奖励总量为 totalAmount, staking奖励时长 totalTime, 奖励刷新周期为 periodTime, 每个周期奖励的衰减系数为 defactor 的情况下，完整的每天奖励量列表\n    // 例如: [1000,900,810,...], 意为第1天的奖励量为1000, 第2天的奖励量为900,...\n    calculateRewardList(totalAmount, totalTime, periodTime, defactor) {\n        // TODO [Done] corner case 的返回值需要修改为 array 类型\n        if (totalAmount == 0 ) {\n            return [0];\n        }\n        if (totalTime <= 1 ) {\n            return [totalAmount];\n        } \n        if (periodTime == 0) {\n            return [totalAmount];\n        }\n        if (defactor == 0) {\n            return [totalAmount];\n        }\n        const periodNum = divide(totalTime, periodTime);\n        const dividend = subtract(1, defactor);\n        const divisor = subtract(1, pow(defactor, periodNum));\n        let releaseBase = StandardNum(chain(totalAmount).multiply(dividend).divide(divisor));\n        if (defactor == 1.0) {\n            releaseBase = StandardNum(chain(totalAmount).divide(periodNum));\n        }\n\n        let res = [];\n        for (let i = 0;i < totalTime; i++) {\n            let curPeriod = Math.floor(i / periodTime);\n            let tmp = StandardNum(releaseBase * pow(defactor, curPeriod) / periodTime);\n            res.push(tmp);\n            \n        }\n        return res;\n    }\n\n    // 当模型从暂停状态重新启动测算时，用户可能对参数进行了修改，新的参数需要更新到模型中\n    // 更新已存在的 stake 实例里的参数\n    selfUpdate(label, rewardPolicy, stakeAmount) {\n        this.label = label;\n        // TODO 暂不支持在测算中途更改 rewardTotal，因为 rewardList 是在测算初始的时候就计算出来了\n        // this.rewardTotal = Number(rewardPolicy.rewardTotal);\n        this.rewardLifetime = Number(rewardPolicy.rewardLifetime);\n        this.rewardRefreshPeriod = Number(rewardPolicy.rewardRefreshPeriod);\n        this.rewardDefactor = Number(rewardPolicy.rewardDefactor);\n\n        stakeAmount.forEach(element => {\n            // 更新 stakeAmount 数据\n            this.stakeAmount.set(element.name, Number(element.prop) / 100);\n        })\n    }\n\n}\n\nexport class Unstake {\n\n    // constructor\n    // params:\n    //      coolTime: 180\n    //      unstakeAmount: [\n    //          { name: \"Team\", prop: 0, class: \"team-slider\" },\n    //          { name: \"Investor\", prop: 0, class: \"investor-slider\" },\n    //          { name: \"Advisor\", prop: 0, class: \"advisor-slider\" },\n    //          { name: \"Foundation\", prop: 0, class: \"foundation-slider\" },\n    //          { name: \"Community\", prop: 0, class: \"community-slider\" },\n    //      ],\n    constructor(label, coolTime, unstakeAmount) {\n        // label: 用户在前端交互页面为节点自定义的名字\n        this.label = label;\n        // coolTime: unstake 操作执行后的锁仓时间\n        this.coolTime = Number(coolTime);\n        \n        // unstakeAmount: unstake 解除质押的数量(以百分比的形式)\n        // Example: {\"Team\": 0.1, \"Community\": 0.2}\n        this.unstakeAmount = new Map();\n        // unstakeHistory: unstake 锁仓单的记录，当锁仓时间结束时，从记录中获取可以释放的量\n        // Example: {11: {\"Team\": 1000, \"Community\": 2000}}\n        this.unstakeHistory = new Map();\n\n        unstakeAmount.forEach(element => {\n            this.unstakeAmount.set(element.name, Number(element.prop) / 100);\n        })\n    }\n\n    // 执行测算逻辑\n    run(preNode, curDay) {\n        // 如果没有前序节点，则不会执行测算逻辑\n        if (preNode == null) {\n            return ;\n        }\n        //  TODO: 考虑什么情况下 unstake 的run函数可以跳过？unstakeAmount 为 0的时候？\n        // if (condition) {\n        //     return ;\n        // }\n        \n        if (preNode.constructor === Token) {\n            // console.log(this.label, \"::pre Node is: \", preNode.symbol);\n            let unStakeRecord = new Map();\n            for (let item of this.unstakeAmount) {\n                let amount = StandardNum(preNode.stakedAmount.get(item[0]) * item[1]);\n                // 如果当前参与方 unstake 的 <=  0，跳过\n                if (amount <= 0.0) {\n                    // unStakeRecord.set(item[0], Number(0));\n                    continue;\n                }\n                    \n                let stakeDelta = preNode.stakedAmountDelta.get(item[0]) - amount;\n                preNode.stakedAmountDelta.set(item[0], stakeDelta);\n                unStakeRecord.set(item[0], amount);\n            }\n\n            // 当 unStakeRecord 记录里有内容时，插入到 unstakeHistory 中\n            if(unStakeRecord.size > 0){\n                \n                for (let item of unStakeRecord) {\n                    if (!this.unstakeHistory.has(curDay + this.coolTime)) {\n                        // 为什么需要各参与者的数值初始化为0？因为 antv 数据可视化效果需要\n                        this.unstakeHistory.set(curDay + this.coolTime, mapInit(this.unstakeAmount.keys()));\n                    }\n\n                    let old = this.unstakeHistory.get(curDay + this.coolTime).get(item[0]);\n                    if (old == undefined) old = Number(0);\n                    old += item[1];\n\n                    // TODO (xufei) item[1] 换成 old？\n                    this.unstakeHistory.get(curDay + this.coolTime).set(item[0], old);\n                }\n               \n            }\n            \n            \n        } else if (preNode.constructor === Stake) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Vest) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Unstake) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n        }\n    }\n\n    // 执行 Delta 数据到 Commit 数据的更新\n    update() {\n        console.log(this.label,\": unstake History: \", this.unstakeHistory);\n    }\n\n    // 当模型从暂停状态重新启动测算时，用户可能对参数进行了修改，新的参数需要更新到模型中\n    // 更新已存在的 Unstake 实例里的参数\n    selfUpdate(label, coolTime, unstakeAmount) {\n        this.label = label;\n        this.coolTime = Number(coolTime);\n        unstakeAmount.forEach(element => {\n            this.unstakeAmount.set(element.name, Number(element.prop) / 100);\n        })\n    }\n}\n\nexport class Vest {\n\n    // constructor\n    // params:\n    //      vestAmount: [\n    //          {\n    //              name: \"Team\",\n    //              prop: 0,\n    //              class: \"team-slider\",\n    //              lockUpTime: 0,\n    //              releasePeriod: 0,\n    //              cliff: 0,\n    //          },\n    //          {\n    //              name: \"Investor\",\n    //              prop: 0,\n    //              class: \"investor-slider\",\n    //              lockUpTime: 0,\n    //              releasePeriod: 0,\n    //              cliff: 0,\n    //          },\n    //          {\n    //              name: \"Advisor\",\n    //              prop: 0,\n    //              class: \"advisor-slider\",\n    //              lockUpTime: 0,\n    //              releasePeriod: 0,\n    //              cliff: 0,\n    //          },\n    //          {\n    //              name: \"Foundation\",\n    //              prop: 0,\n    //              class: \"foundation-slider\",\n    //              lockUpTime: 0,\n    //              releasePeriod: 0,\n    //              cliff: 0,\n    //          },\n    //          {\n    //              name: \"Community\",\n    //              prop: 0,\n    //              class: \"community-slider\",\n    //              lockUpTime: 0,\n    //              releasePeriod: 0,\n    //              cliff: 0,\n    //          },\n    //      ],\n    constructor(label, vestAmount) {\n        // label: 用户在前端交互页面为节点自定义的名字\n        this.label = label;\n        // vestHistory: vest 锁仓单的记录，当锁仓时间结束时，从记录中获取可以释放的量\n        // Example: {181: {\"Team\": 10000, \"Community\": 40000}}\n        this.vestHistory = new Map();\n        // vestAmount: vest 锁仓的数量(以百分比的形式)\n        // Example: {\"Team\": 1.0, \"Community\": 1.0}\n        this.vestAmount = new Map();\n        // vestPolicy: vest 锁仓的策略\n        // Example: {\"Team\": {lockupTime: 180, releasePeriod: 30, cliff: 30}}\n        this.vestPolicy = new Map();\n\n        vestAmount.forEach(element => {\n            this.vestAmount.set(element.name, Number(element.prop) / 100);\n            this.vestPolicy.set(element.name, {lockupTime: Number(element.lockUpTime), releasePeriod: Number(element.releasePeriod), cliff: Number(element.cliff)});\n        })\n\n    }\n\n    // 执行测算逻辑\n    run(preNode, curDay) {\n        // 如果没有前序节点，则不会执行测算逻辑\n        if (preNode == null) {\n            return ;\n        }\n        //  TODO: 考虑什么情况下 vest 的run函数可以跳过？vestAmount 为 0的时候？\n        // if (condition) {\n        //     return ;\n        // }\n        \n        if (preNode.constructor === Token) {\n            let vestRecord = new Map();\n            if(preNode.totalSupply > 0 && preNode.canVest == 1) {\n                // 对于项目发行代币，vest 的对象是初始分配的币量\n                for (let item of this.vestAmount) {\n                    let amount = StandardNum((preNode.allocationPercent.get(item[0]) * preNode.totalSupply - preNode.allocatedAmount.get(item[0])) * item[1]);\n                    // 对于 amount <= 0 的情况，不插入到 vestRecord 里\n                    if (amount <= 0.0) {\n                        // vestRecord.set(item[0], Number(0));\n                        continue;\n                    }\n                        \n                    preNode.allocatedAmountDelta.set(item[0], preNode.allocatedAmountDelta.get(item[0]) + amount);\n\n                    vestRecord.set(item[0], amount);\n                }\n                \n            } else if (preNode.totalSupply <= 0 ) {\n                // 对于非项目发行代币，vest 的对象可能是 freeMoney 部分\n                for (let item of this.vestAmount) {\n                    let amount = StandardNum(preNode.freeMoney.get(item[0]) * item[1]);\n                    // 对于 amount <= 0 的情况，不插入到 vestRecord 里\n                    if (amount <= 0.0) {\n                        // vestRecord.set(item[0], Number(0));\n                        continue;\n                    }\n                        \n                    preNode.freeMoneyDelta.set(item[0], preNode.freeMoneyDelta.get(item[0]) - amount);\n                    vestRecord.set(item[0], amount);\n                }\n               \n            }\n            // 当 vestRecord 记录里有内容时，插入到 vestHistory 中\n            if(vestRecord.size > 0){\n\n                for (let item of vestRecord) {\n                    // 线性释放\n                    let releasePeriod = this.vestPolicy.get(item[0]).releasePeriod;\n                    let releaseNumber = Math.floor(this.vestPolicy.get(item[0]).lockupTime / releasePeriod);\n                    let cliff = this.vestPolicy.get(item[0]).cliff;\n                    if (cliff == 0) releaseNumber++;\n                    let releaseAmount = StandardNum(item[1] / releaseNumber);\n                    \n                    if (this.vestPolicy.get(item[0]).lockupTime == 0 || releasePeriod == 0 ) {\n                        releaseNumber = 1;\n                        releaseAmount = item[1];\n                    }\n\n                    for (let i = 0; i < releaseNumber; i++) {\n                        // 如果 vestHistory 里没有 curDay + cliff + i * releasePeriod 的记录时，初始化\n                        if (!this.vestHistory.has(curDay + cliff + i * releasePeriod)) {\n                            // 为什么需要各参与者的数值初始化为0？因为 antv 数据可视化效果需要\n                            this.vestHistory.set(curDay + cliff + i * releasePeriod, mapInit(this.vestAmount.keys()));\n                        } \n                        // 将这次计算需要通过 vest 释放的 amount 累加到历史数据上\n                        let old = this.vestHistory.get(curDay + cliff + i * releasePeriod);\n                        old.set(item[0], (old.get(item[0]) == undefined ? 0 : old.get(item[0])) + releaseAmount);\n                        this.vestHistory.set(curDay + cliff + i * releasePeriod, old);\n                    }\n\n                    // 老版本是这么写的，比较繁琐\n                    // 对于 lockUpTime 为 0，即不需要锁仓立即释放的情况\n                    // if (this.vestPolicy.get(item[0]).lockupTime == 0 && cliff == 0 && releasePeriod == 0) {\n                    //     // 如果 vestHistory 里没有 curDay 的记录时，初始化\n                    //     if (!this.vestHistory.has(curDay)) {\n                    //         this.vestHistory.set(curDay, new Map());\n                    //     } \n                    //     // 将这次计算需要通过 vest 释放的 amount 累加到历史数据上\n                    //     let old = this.vestHistory.get(curDay);\n                    //     old.set(item[0], (old.get(item[0]) == undefined ? 0 : old.get(item[0])) + item[1]);\n                    //     this.vestHistory.set(curDay, old);\n                    // } \n                    // else {\n                    //     for (let i = 0; i < releaseNumber; i++) {\n                    //         // 如果 vestHistory 里没有 curDay + cliff + i * releasePeriod 的记录时，初始化\n                    //         if (!this.vestHistory.has(curDay + cliff + i * releasePeriod)) {\n                    //             this.vestHistory.set(curDay + cliff + i * releasePeriod, new Map());\n                    //         } \n                    //         // 将这次计算需要通过 vest 释放的 amount 累加到历史数据上\n                    //         let old = this.vestHistory.get(curDay + cliff + i * releasePeriod);\n                    //         old.set(item[0], (old.get(item[0]) == undefined ? 0 : old.get(item[0])) + releaseAmount);\n                    //         this.vestHistory.set(curDay + cliff + i * releasePeriod, old);\n                    //         // console.log(this.label, \"::Vest: inserting vest history:\", curDay + cliff + i * releasePeriod, \" - \", old);\n                    //     }\n                    // }\n                    \n                }\n                \n            }\n            \n        } else if (preNode.constructor === Stake) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Vest) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n\n        } else if (preNode.constructor === Unstake) {\n            console.log(this.label,\"::pre Node is: \", preNode.label);\n        }\n\n    }\n\n    // 执行 Delta 数据到 Commit 数据的更新\n    update() {\n        console.log(this.label,\": vest History: \", this.vestHistory);\n    }\n\n    // 当模型从暂停状态重新启动测算时，用户可能对参数进行了修改，新的参数需要更新到模型中\n    // 更新已存在的 Vest 实例里的参数\n    selfUpdate(label, vestAmount) {\n        this.label = label;\n        vestAmount.forEach(element => {\n            this.vestAmount.set(element.name, Number(element.prop) / 100);\n            this.vestPolicy.set(element.name, {lockupTime: Number(element.lockUpTime), releasePeriod: Number(element.releasePeriod), cliff: Number(element.cliff)});\n        })\n\n    }\n}\n"]}]}