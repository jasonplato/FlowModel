{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/xufei/Desktop/FlowModel/src/api/index.js","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/api/index.js","mtime":1653708835755},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":1653708690128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGh0dHAgZnJvbSAnLi9wdWJsaWMnOwovKioKICog5q2k5aSE5YmN56uv5Lya5Y+R6YCB57uZ5YW25ZCM5ZCN55qE5Luj55CG5pyN5Yqh5Zmo77yM5LiO5b2T5YmN56uv5Y+j55u45ZCM77yM6ZqP5ZCO5Lya55Sx5Luj55CG5pyN5Yqh5Zmo5LiO55yf5a6eaXDlkoznq6/lj6PkuqTkupIKICog5pWF5q2k5aSE6K+35rGC5peg6ZyA5YaZ5YmN57yA5pyN5Yqh5Zmo5L+h5oGvCiAqLwoKdmFyIGJhc2VVcmwgPSAiL2FwaSI7Ci8qKgogKiDmn6Xor6JuZnTkv6Hmga8KICogQHBhcmFtIHthY2NvdW50QWRkcixtZXRhZGF0YUhhc2h9IHBhcmFtcyAKICogQHJldHVybnMge2RhdGE6e21ldGFkYXRhSGFzaCxtb2RlbERhdGEscGFyYW1zfSxlcnJvcl9pbmZvLG1lc3NhZ2VfY29kZX0KICovCgpleHBvcnQgdmFyIHF1ZXJ5bW9kZWwgPSBmdW5jdGlvbiBxdWVyeW1vZGVsKHBhcmFtcykgewogIGNvbnNvbGUubG9nKHBhcmFtcyk7CiAgcmV0dXJuIGh0dHAuZmV0Y2hQb3N0KGJhc2VVcmwgKyAnL21lc3NhZ2VzL2dldG1vZGVsJywgcGFyYW1zKTsKfTsKLyoqCiAqIOeUn+aIkG5mdO+8jOWQkeWQjuerr+iOt+WPlmhhc2gKICogQHBhcmFtIHsiYWNjb3VudEFkZHIiOiIweDEyMyIsCiAqICJtZXRhRGF0YSI6IAogKiB7Im5hbWUiOiJBcGV4IiwiZGVzYyI6InRoZSBtZWFzdXJlIG1vZGVsIG9mIEFwZXgiLAogKiAiZGlzcGxheVVybCI6Imh0dHA6Ly9leGFtcGxlLmNvbSIsCiAqICJtZXRhZGF0YUhhc2giOiIiCiAqIH0sCiAqICJzZWNyZXREYXRhIjoKICogeyJtb2RlbERhdGEiOiJ0b2tlbi1BLHRva2VuLUIiLCJwYXJhbXMiOiJwYXJhbS0xLHBhcmFtLTIifQogKiB9JyBwYXJhbXMgCiAqIEByZXR1cm5zIAogKi8KCmV4cG9ydCB2YXIgbWludG5mdCA9IGZ1bmN0aW9uIG1pbnRuZnQocGFyYW1zKSB7CiAgcmV0dXJuIGh0dHAuZmV0Y2hQb3N0KGJhc2VVcmwgKyAnL21lc3NhZ2VzL21pbnRuZnQnLCBwYXJhbXMpOwp9OwovKioKICogcXVlcnltZXRhZGF0Yeivt+axguS4rWFjY291bnRBZGRy6Z2e5b+F5aGr77yMCiAqIOS4uuepuuWImeaMieWIhumhtei/lOWbnuaJgOaciU5GVOeahG1ldGFkYXRh77yMCiAqIOS4jeS4uuepuuWImeaMieWIhumhtei/lOWbnuaMh+WumueUqOaIt+eahE5GVCBtZXRhZGF0YQogKiBAcGFyYW0ge2FjY291bnRBZGRyLGJlZ2luLGVuZH0gcGFyYW1zICAKICogQHJldHVybnMgCiAqLwoKZXhwb3J0IHZhciBnZXRuZnRzID0gZnVuY3Rpb24gZ2V0bmZ0cyhwYXJhbXMpIHsKICByZXR1cm4gaHR0cC5mZXRjaFBvc3QoYmFzZVVybCArICcvbWVzc2FnZXMvZ2V0bmZ0cycsIHBhcmFtcyk7Cn07Ci8qKgogKiBzYXZlbWV0YWRhdGEg5Y+C5pWw56S65L6LOgogKiBwYXJhbXM6IHsKICogICJuZnRJZCI6ICIxMiIsCiAqICAiYWRkcmVzcyI6ICIweG93bmVyIiwKICogICJtZXRhZGF0YSIgOiB7CiAqICAgICAgIm5hbWUiOiAidGVzdCIsCiAqICAgICAgImRlc2MiOiAiZGVzYyIsCiAqICAgICAgInBpY1VybCI6ICJJUEZTIGNpZCIsCiAqICAgICAgInByb3BlcnR5IjogWyJwcm9wZXJ0eTEiXSwKICogICAgICAia2V5IjogIkFFUyBrZXkiLAogKiAgICAgICJwcml2VXJsIjogIklQRlMgY2lkIgogKiAgfQogKiB9CiAqLwoKZXhwb3J0IHZhciBzYXZlbWV0YWRhdGEgPSBmdW5jdGlvbiBzYXZlbWV0YWRhdGEocGFyYW1zKSB7CiAgcmV0dXJuIGh0dHAuZmV0Y2hQb3N0KGJhc2VVcmwgKyAnL21lc3NhZ2VzL3NhdmVtZXRhJywgcGFyYW1zKTsKfTsKZXhwb3J0IHZhciBnZXRNYWtlT2ZmZXJzID0gZnVuY3Rpb24gZ2V0TWFrZU9mZmVycyhwYXJhbXMpIHsKICByZXR1cm4gaHR0cC5mZXRjaFBvc3QoYmFzZVVybCArICcvbWVzc2FnZXMvcmVhZG9mZmVyP25mdElkPScgKyBwYXJhbXMpOwp9OwovKioKICogc2F2ZW1ldGFkYXRhIOWPguaVsOekuuS+izoKICogcGFyYW1zOiAibmZ0SWQiCiAqLwoKZXhwb3J0IHZhciBxdWVyeW1ldGFkYXRhID0gZnVuY3Rpb24gcXVlcnltZXRhZGF0YShwYXJhbXMpIHsKICByZXR1cm4gaHR0cC5mZXRjaFBvc3QoYmFzZVVybCArICcvbWVzc2FnZXMvZ2V0bWV0YT9uZnRJZD0nICsgcGFyYW1zKTsKfTsKLyoqCiAqIHNhdmVvZmZlciDlj4LmlbDnpLrkvos6CiAqIHBhcmFtczogewogKiAgIm5mdElkIjogIjEyIiwKICogICJhZGRyZXNzIjogIjB4b3duZXIiLAogKiAgInByaWNlIjogIjEwMCIKICogfQogKi8KCmV4cG9ydCB2YXIgc2F2ZW9mZmVyID0gZnVuY3Rpb24gc2F2ZW9mZmVyKHBhcmFtcykgewogIHJldHVybiBodHRwLmZldGNoUG9zdChiYXNlVXJsICsgJy9tZXNzYWdlcy9zYXZlb2ZmZXInLCBwYXJhbXMpOwp9OwovKioKICogcmVhZG9mZmVyIOWPguaVsOekuuS+izoKICogcGFyYW1zOiB7CiAqICAibmZ0SWQiOiAiMTIiCiAqIH0KICovCgpleHBvcnQgdmFyIHF1ZXJ5b2ZmZXIgPSBmdW5jdGlvbiBxdWVyeW9mZmVyKHBhcmFtcykgewogIHJldHVybiBodHRwLmZldGNoUG9zdChiYXNlVXJsICsgJy9tZXNzYWdlcy9yZWFkb2ZmZXI/bmZ0SWQ9JyArIHBhcmFtcyk7Cn07"},{"version":3,"sources":["/Users/xufei/Desktop/FlowModel/src/api/index.js"],"names":["http","baseUrl","querymodel","params","console","log","fetchPost","mintnft","getnfts","savemetadata","getMakeOffers","querymetadata","saveoffer","queryoffer"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,UAAjB;AACA;;;;;AAIA,IAAMC,OAAO,GAAG,MAAhB;AACA;;;;;;AAKA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,oBAAzB,EAA+CE,MAA/C,CAAP;AACH,CAHM;AAMP;;;;;;;;;;;;;;AAaA,OAAO,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAACJ,MAAD,EAAY;AAC/B,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,mBAAzB,EAA8CE,MAA9C,CAAP;AACH,CAFM;AAIP;;;;;;;;AAOA,OAAO,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAACL,MAAD,EAAY;AAC/B,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,mBAAzB,EAA8CE,MAA9C,CAAP;AACH,CAFM;AAIP;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACN,MAAD,EAAY;AACpC,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,oBAAzB,EAA+CE,MAA/C,CAAP;AACH,CAFM;AAIP,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACP,MAAD,EAAY;AACrC,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,4BAAV,GAAyCE,MAAxD,CAAP;AACH,CAFM;AAIP;;;;;AAIA,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACR,MAAD,EAAY;AACrC,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,0BAAV,GAAuCE,MAAtD,CAAP;AACH,CAFM;AAKP;;;;;;;;;AAQA,OAAO,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAACT,MAAD,EAAY;AACjC,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,qBAAzB,EAAgDE,MAAhD,CAAP;AACH,CAFM;AAIP;;;;;;;AAMA,OAAO,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAACV,MAAD,EAAY;AAClC,SAAOH,IAAI,CAACM,SAAL,CAAeL,OAAO,GAAG,4BAAV,GAAyCE,MAAxD,CAAP;AACH,CAFM","sourcesContent":["import http from './public'\n/**\n * 此处前端会发送给其同名的代理服务器，与当前端口相同，随后会由代理服务器与真实ip和端口交互\n * 故此处请求无需写前缀服务器信息\n */\nconst baseUrl = \"/api\"\n/**\n * 查询nft信息\n * @param {accountAddr,metadataHash} params \n * @returns {data:{metadataHash,modelData,params},error_info,message_code}\n */\nexport const querymodel = (params) => {\n    console.log(params);\n    return http.fetchPost(baseUrl + '/messages/getmodel', params)\n}\n\n\n/**\n * 生成nft，向后端获取hash\n * @param {\"accountAddr\":\"0x123\",\n * \"metaData\": \n * {\"name\":\"Apex\",\"desc\":\"the measure model of Apex\",\n * \"displayUrl\":\"http://example.com\",\n * \"metadataHash\":\"\"\n * },\n * \"secretData\":\n * {\"modelData\":\"token-A,token-B\",\"params\":\"param-1,param-2\"}\n * }' params \n * @returns \n */\nexport const mintnft = (params) => {\n    return http.fetchPost(baseUrl + '/messages/mintnft', params)\n}\n\n/**\n * querymetadata请求中accountAddr非必填，\n * 为空则按分页返回所有NFT的metadata，\n * 不为空则按分页返回指定用户的NFT metadata\n * @param {accountAddr,begin,end} params  \n * @returns \n */\nexport const getnfts = (params) => {\n    return http.fetchPost(baseUrl + '/messages/getnfts', params)\n}\n\n/**\n * savemetadata 参数示例:\n * params: {\n *  \"nftId\": \"12\",\n *  \"address\": \"0xowner\",\n *  \"metadata\" : {\n *      \"name\": \"test\",\n *      \"desc\": \"desc\",\n *      \"picUrl\": \"IPFS cid\",\n *      \"property\": [\"property1\"],\n *      \"key\": \"AES key\",\n *      \"privUrl\": \"IPFS cid\"\n *  }\n * }\n */\nexport const savemetadata = (params) => {\n    return http.fetchPost(baseUrl + '/messages/savemeta', params)\n}\n\nexport const getMakeOffers = (params) => {\n    return http.fetchPost(baseUrl + '/messages/readoffer?nftId=' + params)\n}\n\n/**\n * savemetadata 参数示例:\n * params: \"nftId\"\n */\nexport const querymetadata = (params) => {\n    return http.fetchPost(baseUrl + '/messages/getmeta?nftId=' + params)\n}\n\n\n/**\n * saveoffer 参数示例:\n * params: {\n *  \"nftId\": \"12\",\n *  \"address\": \"0xowner\",\n *  \"price\": \"100\"\n * }\n */\nexport const saveoffer = (params) => {\n    return http.fetchPost(baseUrl + '/messages/saveoffer', params);\n}\n\n/**\n * readoffer 参数示例:\n * params: {\n *  \"nftId\": \"12\"\n * }\n */\nexport const queryoffer = (params) => {\n    return http.fetchPost(baseUrl + '/messages/readoffer?nftId=' + params);\n}"]}]}