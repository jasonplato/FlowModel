{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xufei/Desktop/FlowModel/src/components/Template/MintForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/components/Template/MintForm.vue","mtime":1653708835739},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js","mtime":1653708694636}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MintForm.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-form\n      :label-position=\"labelPosition\"\n      :model=\"ruleForm\"\n      :rules=\"rules\"\n      ref=\"ruleForm\"\n      label-width=\"100px\"\n      class=\"demo-ruleForm\"\n    >\n      <el-form-item label=\"Model Image\">\n        <div class=\"com-upload-img\">\n          <div class=\"img_group\">\n            <div class=\"img_box\" v-if=\"allowAddImg\">\n              <div>\n                <i class=\"el-icon-picture image-upload-button\"></i>\n                <input\n                  ref=\"upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  multiple=\"multiple\"\n                  class=\"model-image-input\"\n                  @change=\"changeImg($event)\"\n                />\n              </div>\n            </div>\n\n            <viewer :images=\"imgArr\">\n              <img\n                v-for=\"(src, index) in imgArr\"\n                :src=\"src\"\n                :key=\"index\"\n                width=\"450\"\n                class=\"img-show\"\n                @contextmenu.prevent=\"deleteImg(index)\"\n              />\n            </viewer>\n          </div>\n        </div>\n      </el-form-item>\n      <el-form-item label=\"Model Name\" prop=\"name\">\n        <el-input v-model=\"ruleForm.name\"></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"Description\" prop=\"desc\">\n        <el-input v-model=\"ruleForm.desc\"></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"Properties\" prop=\"properties\">\n        <el-tooltip\n          class=\"item\"\n          effect=\"light\"\n          :content=\"item.content\"\n          placement=\"bottom\"\n          v-for=\"item in ruleLists\"\n          :key=\"item.id\"\n        >\n          <div class=\"property-item\">{{ item.label }}</div>\n        </el-tooltip>\n      </el-form-item>\n\n      <!-- <el-form-item label=\"Report File\" prop=\"reportFile\">\n        <el-upload\n          accept=\".pdf\"\n          action=\"https://jsonplaceholder.typicode.com/posts/\"\n          :file-list=\"fileArr\"\n          :show-file-list=\"true\"\n          :auto-upload=\"false\"\n          :before-upload=\"beforeUpload\"\n          :on-success=\"upSuccess\"\n          :on-error=\"upError\"\n          :on-change=\"imgPreview\"\n        >\n          <el-button size=\"small\" type=\"primary\" class=\"upload-btn\">\n            <span class=\"iconfont icon-shangchuan\" />Click to Upload\n          </el-button>\n        </el-upload>\n      </el-form-item> -->\n\n      <!-- <el-form-item label=\"Include Model\" prop=\"include\">\n        <el-switch v-model=\"ruleForm.delivery\"></el-switch>\n      </el-form-item> -->\n\n      <!-- <el-form-item label=\"External Link\" prop=\"exlink\">\n        <el-input v-model=\"ruleForm.exlink\"></el-input>\n      </el-form-item> -->\n\n      <el-form-item>\n        <!-- <el-button @click=\"resetForm('ruleForm')\">Reset</el-button> -->\n        <el-button type=\"primary\" @click=\"mint()\">Mint</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n\n<script>\nimport pdf from \"vue-pdf\";\nimport { savemetadata } from \"../../api/index\";\nimport { createNFT } from \"../../api/web3/contracts\";\nimport { mapState } from \"vuex\";\nimport { getStore } from \"../../utils/storage\";\nimport { randomString } from \"../../utils/ranDom\";\n\nimport { uploadToIPFS } from \"../../utils/ipfsUtil\";\nimport { encryptDataNormal, encryptDataEOA, getEOAPubkey, decryptDataEOA} from \"../../utils/cryptoUtil\";\nconst crypto = require(\"crypto\");\nexport default {\n  props: [\"close\"],\n  data() {\n    return {\n      imgArr: [],\n      allowAddImg: true,\n      labelPosition: \"top\",\n      dialogImageUrl: \"\",\n      //fileList: [],\n      pdfUrl: \"\",\n      numPages: [],\n      // fileArr: [],\n      upLoadImgUrl: \"\",\n      dialogVisible: false,\n      ruleForm: {\n        name: \"\",\n        desc: \"\",\n        properties: [],\n        // include: false,\n        // exlink: \"\",\n      },\n      rules: {\n        name: [\n          {\n            required: true,\n            message: \"Please Enter Model Name\",\n            trigger: \"blur\",\n          },\n          {\n            min: 3,\n            max: 15,\n            message: \"3 to 15 characters long\",\n            trigger: \"blur\",\n          },\n        ],\n        desc: [\n          {\n            required: true,\n            message: \"Please Enter Model Description\",\n            trigger: \"blur\",\n          },\n          {\n            min: 3,\n            max: 150,\n            message: \"3 to 150 characters long\",\n            trigger: \"blur\",\n          },\n        ],\n\n        // exlink: [\n        //   {\n        //     required: true,\n        //     message: \"Please Enter External Link\",\n        //     trigger: \"blur\",\n        //   },\n        //   {\n        //     min: 10,\n        //     max: 200,\n        //     message: \"10 to 200 characters long\",\n        //     trigger: \"blur\",\n        //   },\n        // ],\n      },\n      mintResult: false,\n    };\n  },\n  components: {\n    pdf,\n  },\n  computed: {\n    ...mapState([\n      \"user\",\n      \"statusCode\",\n      \"configData\",\n      \"historySimulateData\",\n      \"ruleLists\",\n    ]),\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          alert(\"submit!\");\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    // resetForm(formName) {\n    //   this.$refs[formName].resetFields();\n    // },\n\n    // handleRemove(file, fileList) {\n    //   console.log(file, fileList);\n    // },\n    // handlePictureCardPreview(file) {\n    //   this.dialogImageUrl = file.url;\n    //   this.dialogVisible = true;\n    // },\n    // handleChange(file, fileList) {\n    //   this.fileList = fileList.slice(-3);\n    // },\n    // beforeUpload(file) {\n    //   const fileSuffix = file.name.substring(file.name.lastIndexOf(\".\") + 1);\n    //   const whiteList = [\"pdf\"];\n    //   if (whiteList.indexOf(fileSuffix) === -1) {\n    //     this.$msg(\"上传文件只能是 pdf\");\n    //     return false;\n    //   }\n    // },\n    // imgPreview(file) {\n    //   this.fileArr = [];\n    //   this.fileArr.push(file);\n    //   this.form.position = \"\";\n    //   console.log(file);\n    //   this.form.position = file.name;\n    //   let fileName = file.name;\n    //   let regex = /(.jpg|.jpeg|.gif|.png|.pdf)$/;\n    //   if (regex.test(fileName.toLowerCase())) {\n    //     this.upLoadImgUrl = URL.createObjectURL(file.raw); // 获取URL\n    //     this.pdfUrl = this.getPdfUrl(file);\n    //     console.log(this.upLoadImgUrl);\n    //   } else {\n    //     this.$message.error(\"请选择pdf文件\");\n    //   }\n    // },\n\n    // 上传成功\n    upSuccess(res) {\n      this.$message({\n        message: \"上传成功\",\n        type: \"success\",\n      });\n    },\n    // 上传失败\n    upError(e) {\n      this.$message({\n        message: \"上传失败\",\n        type: \"error\",\n      });\n    },\n    //处理pdf\n    getPdfUrl(file) {\n      console.log(file);\n      let url = window.URL.createObjectURL(file.raw); //将文件转化成url\n      //加载pdf\n      let loadingTask = pdf.createLoadingTask(url);\n      loadingTask.promise\n        .then((pdf) => {\n          this.numPages = pdf.numPages;\n          console.log(this.numPages);\n        })\n        .catch((err) => {\n          console.error(\"pdf 加载失败\", err);\n        });\n      return url;\n    },\n    //调用该函数创建nft\n    async confirmMint(modelData, user, name, desc, pic) {\n      // 随机生成长度为 32 的字符串，作为 NFT Key 的 AES 对称私钥\n      const key = randomString(32);\n      // 创建 AES 加密\n      // 参数 iv 不可以设置为 null\n      const cipher = crypto.createCipheriv(\"aes256\", key, Buffer.alloc(16, 0));\n\n      let encryptedSecretData = encryptDataNormal(cipher, modelData + \",,,\" + this.getParamsOutsideGraph() + \",,,\" + JSON.stringify(this.historySimulateData));\n\n      // 获取当前登陆的 EOA 公钥\n      let encryptPub = await getEOAPubkey(this.user);\n\n      // 将 NFT Key 用当前公钥加密\n      let encKey = await encryptDataEOA(encryptPub, key);\n      console.log(\"encrypted key:\", encKey);\n\n      // 将 picture, secret data 上传到 IPFS\n      let picCID = await uploadToIPFS(pic);\n      let secretCID = await uploadToIPFS(encryptedSecretData);\n      // let tmp = await downloadFromIPFS(picCID);\n      // console.log(\"downloaded data\", tmp);\n\n      // 组装 property.content TODO\n      let propertyContent = new Array();\n      for (let i = 0; i < this.ruleLists.length; i++) {\n        propertyContent.push(this.ruleLists[i]);\n      } \n\n      // TODO (Xufei) [Done] 调用合约\n      createNFT(\n        this.user,\n        this.ruleForm.name,\n        picCID,\n        this.ruleForm.desc,\n        [JSON.stringify(propertyContent)],\n        encKey,\n        secretCID\n      ).then((chainRes) => {\n        if (chainRes.status == \"success\") {\n          this.$notify.success({\n            title: \"Success\",\n            message: \"Mint NFT successful !\",\n            position: \"bottom-right\",\n          });\n          console.log(\"tx response:\", chainRes.response);\n\n          // TODO (Xufei) [Done] 根据合约返回的交易回执，将相关信息同步到后端\n          let params = {\n            nftId: chainRes.response.id,\n            address: chainRes.response.owner,\n            metadata: {\n              name: this.ruleForm.name,\n              desc: this.ruleForm.desc,\n              picUrl: picCID,\n              property: JSON.stringify(propertyContent),\n              key: encKey,\n              privUrl: secretCID\n            }\n          };\n\n          savemetadata(params).then((res) => {\n            if (res.message_code == this.statusCode.SUCCESSED) {\n              console.log(\"SUCCESS sync mint data to database\");\n            } else {\n              console.error(\"FAIL sync mint data to database\");\n            }\n          });\n\n        } else {\n          this.$notify.error({\n            title: \"Error\",\n            message: \"Mint NFT error !\",\n            position: \"bottom-right\",\n          });\n        }\n      });\n\n    },\n    changeImg(e) {\n      // console.log(this.imgArr);\n      var _this = this;\n      var imgLimit = 10;\n      var files = e.target.files;\n      var image = new Image();\n      if (files.length > 0) {\n        var dd = 0;\n        var timer = setInterval(function () {\n          if (\n            files.item(dd).type != \"image/png\" &&\n            files.item(dd).type != \"image/jpeg\" &&\n            files.item(dd).type != \"image/gif\"\n          ) {\n            _this.$message.error(\"仅支持图片类型！\");\n            return false;\n          }\n          if (files.item(dd).size > imgLimit * 102400) {\n            //to do sth\n            this.$message.error(\"图片要求小于1MB\");\n          } else {\n            image.src = window.URL.createObjectURL(files.item(dd));\n            image.onload = function () {\n              // 默认按比例压缩\n              var w = image.width,\n                h = image.height;\n              var quality = 1;\n              var canvas = document.createElement(\"canvas\");\n              var ctx = canvas.getContext(\"2d\");\n              var anw = document.createAttribute(\"width\");\n              anw.nodeValue = w;\n              var anh = document.createAttribute(\"height\");\n              anh.nodeValue = h;\n              canvas.setAttributeNode(anw);\n              canvas.setAttributeNode(anh);\n              ctx.drawImage(image, 0, 0, w, h);\n              var ext = image.src\n                .substring(image.src.lastIndexOf(\".\") + 1)\n                .toLowerCase(); //图片格式\n              var base64 = canvas.toDataURL(\"image/\" + ext, quality);\n              // 回调函数返回base64的值\n              if (_this.imgArr.length <= 1) {\n                _this.imgArr.unshift(\"\");\n                _this.imgArr.splice(0, 1, base64); //替换数组数据的方法，此处不能使用：this.imgArr[index] = url;\n                _this.$notify.success({\n                  title: \"Success\",\n                  message:\n                    \"Image upload successful! You can right-click to delete it \",\n                  position: \"bottom-right\",\n                });\n                _this.$refs.upload.value = null;\n                if (_this.imgArr.length >= 1) {\n                  _this.allowAddImg = false;\n                }\n              }\n            };\n          }\n          if (dd < files.length - 1) {\n            dd++;\n          } else {\n            clearInterval(timer);\n          }\n        }, 1000);\n      }\n    },\n    deleteImg(index) {\n      this.imgArr.splice(index, 1);\n      if (this.imgArr.length < 5) {\n        this.allowAddImg = true;\n      }\n    },\n    mint() {\n      const modelData = getStore(\"graph\");\n      try {\n        this.confirmMint(\n          modelData,\n          this.user,\n          this.ruleForm.name,\n          this.ruleForm.desc,\n          this.imgArr[0]\n        );\n      } finally {\n        this.ruleForm.name = \"\";\n        this.ruleForm.desc = \"\";\n        this.imgArr = [];\n        this.allowAddImg = true;\n        this.close();\n      }\n    },\n    // 获取画布之外的环境参数，返回值是 JSON 字符串\n    getParamsOutsideGraph() {\n      let res = {\n        configData: this.configData,\n      };\n\n      return JSON.stringify(res);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped >\n.img_box {\n  position: relative;\n  .image-upload-button {\n    font-size: 60px;\n    margin-left: 30px;\n  }\n  .model-image-input {\n    position: absolute;\n    font-size: 40px;\n    left: 30px;\n    top: 0;\n    opacity: 0;\n    width: 60px;\n  }\n}\n.img-show {\n  margin-left: 15px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);\n}\n.item {\n  margin: 4px;\n  float: left;\n  height: 16px;\n}\n.property-item {\n  background: #fff;\n  padding: 5px 20px;\n  border-radius: 8px;\n  line-height: 16px;\n  color: rgb(102, 101, 101);\n  border: rgb(195, 195, 195) solid 1px;\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.12), 0 0 6px rgba(0, 0, 0, 0.04);\n}\n</style>"],"sourceRoot":"src/components/Template"}]}