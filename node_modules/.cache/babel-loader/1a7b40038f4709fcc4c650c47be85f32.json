{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/xufei/Desktop/FlowModel/src/api/web3/contracts.js","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/api/web3/contracts.js","mtime":1653708835755},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":1653708690128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/xufei/Desktop/FlowModel/src/api/web3/contracts.js"],"names":["ethers","FlowInsightERC721NFT","FlowInsightVault","FlowInsightMarketplace","contract_address","marketplace_address","vault_address","contract","vault","marketplace","getWeb3Provider","window","web3Provider","ethereum","providers","Web3Provider","connectMetamask","provider","request","method","account","chainId","Contract","abi","getSigner","status","console","error","accountChangeListener","fn","on","getNftMetadata","id","getNFTMetadata","tx","response","getBalance","address","balance","utils","formatEther","createNFT","to","name","picURL","desc","property","key","privURL","wait","eventFilter","filters","NFTCreated","queryFilter","blockNumber","events","args","toString","owner","addMinter","user","removeMinter","Listen","_FlowInsightId","_to","log","approveNFT","setApprovalForAll","ApprovalForAll","operator","state","registerNFTSale","nftId","Number","Approval","approved"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers';\nimport FlowInsightERC721NFT from \"./FlowInsightERC721NFT.json\";\nimport FlowInsightVault from \"./FlowInsightVault.json\";\nimport FlowInsightMarketplace from \"./FlowInsightMarketplace.json\";\n\nconst contract_address = \"0x6C3838C66770927e0eeC57fCa550B1d651e5da8e\";\nconst marketplace_address = \"0x2528A191640638DcF6FafeE51E95946EE374C641\";\nconst vault_address = \"0xDD495cB2Cd7BFA616eB1F74A70E47F5c8f299BDf\";\n\nlet contract = null;\nlet vault = null;\nlet marketplace = null;\n//获取 metamask provider\nfunction getWeb3Provider() {\n\n    if (!window.web3Provider) {\n        if (!window.ethereum) {\n            return null;\n        }\n        window.web3Provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    }\n    return window.web3Provider;\n\n\n}\n//连接metamask\nasync function connectMetamask(provider) {\n    if (provider === null) {\n        return false;\n    }\n    try {\n        // 获取当前连接的账户地址:\n        let account = await window.ethereum.request({\n            method: 'eth_requestAccounts',\n        });\n        // 获取当前连接的链ID:\n        let chainId = await window.ethereum.request({\n            method: 'eth_chainId'\n        });\n        contract = new ethers.Contract(contract_address, FlowInsightERC721NFT.abi, window.web3Provider.getSigner());\n        vault = new ethers.Contract(vault_address, FlowInsightVault.abi, window.web3Provider.getSigner());\n        marketplace = new ethers.Contract(marketplace_address, FlowInsightMarketplace.abi, window.web3Provider.getSigner());\n        return { account: account, chainId: chainId, status: true };\n    } catch (e) {\n        console.error('could not get a wallet connection.', e);\n        return false;\n    }\n}\n//监听账户切换\nfunction accountChangeListener(fn) {\n    window.ethereum.on('accountsChanged', fn)\n}\n//获取对应id nft元数据\nasync function getNftMetadata(id) {\n    let tx = await contract.getNFTMetadata(id);\n    if (tx != \"\") {\n        return { status: \"successed\", response: tx };\n    } else {\n        return { status: \"failed\", response: null };\n    }\n\n}\n//获取账户余额\nasync function getBalance(address) {\n    const balance = await window.web3Provider.getBalance(address)\n    return ethers.utils.formatEther(balance);\n}\n\n//创建nft\nasync function createNFT(to, name, picURL, desc, property, key, privURL) {\n    try {\n        let tx = await contract.createNFT(to, name, picURL, desc, property, key, privURL);\n        tx = await tx.wait();\n\n        let eventFilter = contract.filters.NFTCreated();\n        let events = await contract.queryFilter(eventFilter, tx.blockNumber, \"latest\");\n\n        return { status: \"success\", response: {id: events[0].args[0].toString(), owner: events[0].args[1]}};\n    } catch (e) {\n        console.error(e);\n        return { status: \"failed\", response: null }\n    }\n}\n//添加\nasync function addMinter(user) {\n    try {\n        let tx = await contract.addMinter(user);\n        return { status: \"successed\", response: tx }\n    } catch (e) {\n        return { status: \"failed\", response: null }\n    }\n}\n//移除\nasync function removeMinter(user) {\n    try {\n        let tx = await contract.addMinter(user);\n        return { status: \"successed\", response: tx }\n    } catch (e) {\n        return { status: \"failed\", response: null }\n    }\n}\n\n// TODO (Xufei) 把上面 createNFT 监听部分和这里的整合成一份代码\n// 监听事件\nasync function Listen(contract) {\n    contract.on(\"NFTCreated\", (_FlowInsightId, _to) => {\n        console.log(\"id:\", _FlowInsightId.toString(), \"; to:\", _to);\n        let id = _FlowInsightId.toString();\n        let owner = _to;\n        console.log(\"1\",id, owner);\n        return {id: id, owner: owner};\n    });\n}\n\nasync function approveNFT() {\n    try {\n        let tx = await contract.setApprovalForAll(marketplace_address, true);\n        tx = await tx.wait();\n\n        let eventFilter = contract.filters.ApprovalForAll();\n        let events = await contract.queryFilter(eventFilter, tx.blockNumber, \"latest\");\n\n        return { status: \"success\", response: {owner: events[0].args[0], operator: events[0].args[1], state: events[0].args[2]}};\n    } catch (e) {\n        console.error(e);\n        return { status: \"failed\", response: null }\n    }\n}\nasync function registerNFTSale(nftId) {\n    try {\n        console.log(\"000\");\n        let tx = await marketplace.registerNFTSale(Number(nftId));\n        tx = await tx.wait();\n        console.log(\"111\");\n        let eventFilter = contract.filters.Approval();\n        let events = await contract.queryFilter(eventFilter, tx.blockNumber, \"latest\");\n        console.log(\"222\");\n        console.log(\"event:\", events);\n        return { status: \"success\", response: {owner: events[0].args[0], approved: events[0].args[1], nftId: events[0].args[2]}};\n    } catch (e) {\n        console.error(e);\n        return { status: \"failed\", response: null }\n    }\n}\nexport {\n    getWeb3Provider,\n    connectMetamask,\n    accountChangeListener,\n    getBalance,\n    getNftMetadata,\n    createNFT,\n    addMinter,\n    removeMinter,\n    approveNFT,\n    registerNFTSale,\n}"]}]}