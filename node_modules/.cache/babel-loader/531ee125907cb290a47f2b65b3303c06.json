{"remainingRequest":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js!/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js??ref--13-0!/Users/wangxufei/Desktop/FlowModel/src/graph/model.js","dependencies":[{"path":"/Users/wangxufei/Desktop/FlowModel/src/graph/model.js","mtime":1652163070427},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wangxufei/Desktop/FlowModel/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/wangxufei/Desktop/FlowModel/src/graph/model.js"],"names":["Scheduler","Action","Stake","Unstake","Vest","Token","Sleep","Model","graph","endDay","slot","status","curDay","antvNodes","Map","nodesInstance","action","tokenLabelIDMap","edgeMap","data","initData","scheduler","getNodes","getEdges","nodes","model","forEach","element","set","id","getData","type","label","stakeLabelIDMap","unstakeLabelIDMap","vestLabelIDMap","console","log","item","antvNode","get","nodeData","tokenData","totalSupply","allocations","community","push","stakeData","rewardPolicyFrom","communityPolicy","stakingPool","tokenInstance","rewardPolicy","rewardTotal","allocationPercent","toFixed","rewardLifetime","stakingRewardLifetime","rewardRefreshPeriod","stakingRewardRefreshPeriod","rewardDefactor","stakingRewardDefactor","stakeAmount","unstakeData","coolDownTime","unstakeAmount","vestData","vestAmount","step","schedule","endFlag","value","key","update","updateDailyData","curNode","undefined","preNode","run","updateOverallData","i","length","has","tmpInstance","roleIdxMap","j","freeMoney","len","time","String","rewardAllocated","originalHistory","unstakeHistory","item2","vestHistory","orderedHistory","keys","Array","sort","a","b","selfUpdate"],"mappings":"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","sourcesContent":["import { Scheduler } from \"./scheduler\";\nimport { Action, Stake, Unstake, Vest } from \"./action\";\nimport { Token } from \"./token\";\nimport { Sleep } from \"./../utils/sleep\";\n\n// var isPaused = false;\n// self.addEventListener('message', function (e) {\n//     // console.log(\"thread message:\", e);\n//     var data = e.data;\n//     switch (data) {\n//       case 'pause':\n//         console.log(\"---------------worker paused\");\n//         isPaused = true;\n//         break;\n//       default:\n//         // self.postMessage('Unknown command: ' + data.msg);\n//     };\n//   }, false);\n\nexport class Model {\n\n    constructor(graph, endDay, slot) {\n        this.graph = graph;\n        // endDay: 模型的测算终止时间\n        this.endDay = endDay;\n        // slot: 模型测算的停顿窗口，每隔这一段时间模型测算过程会停顿 5s，方便操作者进行下一步的调整\n        this.slot = slot;\n        // status: 模型处于哪个状态中 0 - off, 1 - on, 2 - pause\n        this.status = 1;\n        // curDay: 模型测算的当前时间\n        this.curDay = 1;\n        // antvNodes 保存的是原始 antv 定义的节点对象\n        // TODO antvNodes 是否仅仅在初始化的时候用到？\n        this.antvNodes = new Map();\n        // nodesInstance 保存所有节点对象数据 <key: tokenID, value: nodeClassInstance>\n        this.nodesInstance = new Map();\n        // action 内包含 stakeLabelIDMap, unstakeLabelIDMap, vestLabelIDMap\n        this.action = new Action();\n        // tokenLabelIDMap <key: nodeLabel, value: nodeID>\n        this.tokenLabelIDMap = new Map();\n        // EdgeMap <key: sourceID, value: <key: targetID, value: EdgeClassInstance> >\n        this.edgeMap = new Map();\n        // data: 测算模型测算过程中产生的数据\n        this.data = [];\n\n        this.initData();\n\n        this.scheduler = new Scheduler(graph, this.antvNodes);\n        \n        // this.data: [\n        //     {\n        //         type: \"Token2\",\n        //         data: [\n        //             {\n        //                 type: \"Team\",\n        //                 data: [\n        //                     { time: 0, value: 60 },\n        //                     { time: 1, value: 80 },\n        //                     { time: 2, value: 90 },\n        //                     { time: 3, value: 80 },\n        //                     { time: 4, value: 90 },\n        //                     { time: 5, value: 110 },\n        //                     { time: 6, value: 120 },\n        //                     { time: 7, value: 140 },\n        //                 ]\n        //             },\n        //             {\n        //                 type: \"Community\",\n        //                 data: [\n        //                     { time: 0, value: 50 },\n        //                     { time: 1, value: 90 },\n        //                     { time: 2, value: 40 },\n        //                     { time: 3, value: 80 },\n        //                     { time: 4, value: 30 },\n        //                     { time: 5, value: 110 },\n        //                     { time: 6, value: 170 },\n        //                     { time: 7, value: 180 },\n        //                 ]\n        //             }\n\n        //         ]\n        //     },\n        //     {\n        //         type: \"Token1\",\n        //         data: [\n        //             {\n        //                 type: \"Team\",\n        //                 data: [\n        //                     { time: 0, value: 90 },\n        //                     { time: 1, value: 100 },\n        //                     { time: 2, value: 90 },\n        //                     { time: 3, value: 100 },\n        //                     { time: 4, value: 90 },\n        //                     { time: 5, value: 110 },\n        //                     { time: 6, value: 90 },\n        //                     { time: 7, value: 120 },\n        //                 ]\n        //             },\n        //             {\n        //                 type: \"Community\",\n        //                 data: [\n        //                     { time: 0, value: 70 },\n        //                     { time: 1, value: 110 },\n        //                     { time: 2, value: 80 },\n        //                     { time: 3, value: 190 },\n        //                     { time: 4, value: 90 },\n        //                     { time: 5, value: 100 },\n        //                     { time: 6, value: 70 },\n        //                     { time: 7, value: 150 },\n        //                 ]\n        //             }\n\n\n        //         ]\n        //     }\n        // ]\n        \n    }\n\n    initData() {\n        this.getNodes();\n        this.getEdges();\n\n    }\n\n    // 获取当前画布上的所有节点，保存节点原始 antv 数据和用户配置属性参数\n    getNodes() {\n\n        // 获取所有节点的 antv 相关数据，同时建立起不同节点类型的 label(用户设置的节点名字) -> id 的映射表\n        let nodes = this.graph.model.getNodes();\n        nodes.forEach(element => {\n            this.antvNodes.set(element.id, element);\n            \n            switch(element.getData().type) {\n                case \"Token\":\n                    this.tokenLabelIDMap.set(element.label, element.id);\n                    break;\n                case \"Stake\":\n                    this.action.stakeLabelIDMap.set(element.label, element.id);\n                    break;\n                case \"Unstake\":\n                    this.action.unstakeLabelIDMap.set(element.label, element.id);\n                    break;\n                case \"Vest\":\n                    this.action.vestLabelIDMap.set(element.label, element.id);\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        console.log(\"nodes:\", this.antvNodes);\n\n        // 初始化 Token 节点对象并加入到 nodesInstance 中\n        for (let item of this.tokenLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.tokenData;\n            this.nodesInstance.set(item[1], new Token(item[0], nodeData.totalSupply, nodeData.allocations, nodeData.community));\n            this.data.push({type: item[0], data: []});\n        }\n\n        // 根据 stake 节点的 rewardPolicyFrom 参数，更新对应的 token 节点的 stakingPool 参数\n        // TODO 非常丑陋，如何优化？\n        for (let item of this.action.stakeLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.stakeData;\n            this.nodesInstance.get(this.tokenLabelIDMap.get(nodeData.rewardPolicyFrom)).communityPolicy.stakingPool++;\n        }\n\n        // 初始化 stake 节点对象并加入到 nodesInstance 中\n        for (let item of this.action.stakeLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.stakeData;\n            let tokenInstance = this.nodesInstance.get(this.tokenLabelIDMap.get(nodeData.rewardPolicyFrom));\n            let rewardPolicy = {\n                // 此处 rewardTotal 指的是单个 stake 池子所能释放奖励的总量。其值取决于释放的 token 中设置的 Community Staking 总量除以可以释放该 token 的 stake 池总数  \n                rewardTotal: (tokenInstance.communityPolicy.allocations.get(\"Staking\") * tokenInstance.allocationPercent.get(\"Community\") * tokenInstance.totalSupply / tokenInstance.communityPolicy.stakingPool).toFixed(4),\n                rewardLifetime: tokenInstance.communityPolicy.stakingRewardLifetime,\n                rewardRefreshPeriod: tokenInstance.communityPolicy.stakingRewardRefreshPeriod,\n                rewardDefactor: tokenInstance.communityPolicy.stakingRewardDefactor,\n            };\n            this.nodesInstance.set(item[1], new Stake(item[0], rewardPolicy, nodeData.stakeAmount));\n            this.data.push({type: item[0], data: []});\n        }\n\n        // 初始化 unstake 节点对象并加入到 nodesInstance 中\n        for (let item of this.action.unstakeLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.unstakeData;\n            this.nodesInstance.set(item[1], new Unstake(item[0], nodeData.coolDownTime, nodeData.unstakeAmount));\n            this.data.push({type: item[0], data: []});\n        }\n\n        // 初始化 vest 节点对象并加入到 nodesInstance 中\n        for (let item of this.action.vestLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.vestData;\n            this.nodesInstance.set(item[1], new Vest(item[0], nodeData.vestAmount));\n            this.data.push({type: item[0], data: []});\n        }\n\n    }\n\n    // 获取当前画布上的所有边，保存边上用户配置的属性参数\n    getEdges() {\n        // let edges = this.graph.getEdges()\n        // edges.forEach(element => {\n        //     let src = element.getSourceNode().id;\n        //     let dst = element.getTargetNode().id;\n\n        //     let edgeData = element.getData().edgeData;\n        //     console.log(\"edges\", edgeData);\n\n        //     let edge = new Edge(src, dst, edgeData.distribution);\n        //     if (this.edgeMap.get(src) == undefined) {\n        //         this.edgeMap.set(src, new Map());\n        //     }\n        //     this.edgeMap.get(src).set(dst, edge);\n        // })\n    }\n\n    async start() {\n        while (this.curDay <= this.endDay) {\n            let step = this.scheduler.schedule();\n\n            if (step.endFlag == true) {\n                // 更新所有节点\n                this.nodesInstance.forEach(function(value, key) {\n                    value.update();\n                })\n                // 为数据可视化做准备，更新测算过程中每日的动态数据 \n                this.updateDailyData();\n\n                \n                // 每隔一段周期都暂停 5s\n                if (this.slot > 0 && this.curDay % this.slot == 0) {\n                    await Sleep(5000);\n                }\n                this.curDay++;\n                // 如果模型处于 Off / Pause 状态，直接跳出函数\n                if (this.status == 0 || this.status == 2) {\n                    return;\n                }\n\n                continue;\n            }\n\n            if (this.nodesInstance.get(step.curNode) == undefined) {\n                // log 报错提示: 不存在该节点\n                console.log(\"error:: cur node does not exist!\", step);\n                break ;\n            }\n\n            console.log(\"day:\", this.curDay);\n            // 执行当前节点的 run 方法\n            if (step.preNode == null) {\n                this.nodesInstance.get(step.curNode).run(null, this.curDay);\n            }\n            else {\n                this.nodesInstance.get(step.curNode).run(this.nodesInstance.get(step.preNode), this.curDay);\n            }\n\n        }\n\n        // 为数据可视化做准备，更新一次测算总体的数据，如 unstakeHistory, vestHistory 等\n        this.updateOverallData();\n        // log 提示: 测算运行完毕\n        return;\n    }\n\n    updateDailyData() {\n        for (let i = 0; i < this.data.length; i++) {\n            \n            // 更新 token 节点相关的 data\n            if (this.tokenLabelIDMap.has(this.data[i].type)) {\n                let tmpInstance = this.nodesInstance.get(this.tokenLabelIDMap.get(this.data[i].type));\n\n                // this.data 的数据结构如下所示\n                // this.data:\n                // [\n                //     {\n                //         type: \"Token2\",\n                //         data: [\n                //             {\n                //                 type: \"Team\",\n                //                 data: [\n                //                     { time: 0, value: 60 },\n                //                     { time: 1, value: 80 },\n                //                     { time: 2, value: 90 },\n                //                     { time: 3, value: 80 },\n                //                     { time: 4, value: 90 },\n                //                     { time: 5, value: 110 },\n                //                     { time: 6, value: 120 },\n                //                     { time: 7, value: 140 },\n                //                 ]\n                //             }, // 参与者 data 域\n                //             {\n                //                 type: \"Community\",\n                //                 data: [\n                //                     { time: 0, value: 50 },\n                //                     { time: 1, value: 90 },\n                //                     { time: 2, value: 40 },\n                //                     { time: 3, value: 80 },\n                //                     { time: 4, value: 30 },\n                //                     { time: 5, value: 110 },\n                //                     { time: 6, value: 170 },\n                //                     { time: 7, value: 180 },\n                //                 ]\n                //             } // 参与者 data 域\n\n                //         ]\n                //     }, // 节点 data 域\n                // ]\n                // 对于每个节点，其节点的 data 域内会有不同的角色, 如 Team, Community 等; 但是节点 data 域是一个数组，由于将节点含有的角色数据插入 data 域数组的过程不是有序的所以不能直接根据下标就定位到某个角色，\n                // 所以此处需要保存一个映射 roleIdxMap, key 为角色, value 为该角色在节点 data 域数组内的下标，方便后续操作指定节点的指定角色 data 域\n                let roleIdxMap = new Map();\n                \n                // 根据节点 data 域中已包含的角色来初始化 roleIdxMap\n                for (let j = 0; j < this.data[i].data.length; j++) {\n                    roleIdxMap.set(this.data[i].data[j].type, j);\n                }\n\n                // TODO 目前对于 token 节点只支持将 freeMoney 数据可视化\n                for (let item of tmpInstance.freeMoney) {\n                    // 如果 roleIdxMap 中还没有包含某个角色（也意味着节点 data 域中还未包含某个角色），则在节点 data 域中为该角色插入记录，同时将 role -> idx 的映射关系保存起来\n                    if (!roleIdxMap.has(item[0])) {\n                        let len = this.data[i].data.push({type: item[0], data:[]});\n                        roleIdxMap.set(item[0], len - 1);\n                    }\n                    // 往节点 data 域下的角色 data 域插入数据\n                    this.data[i].data[roleIdxMap.get(item[0])].data.push({time: String(this.curDay), value: item[1]});\n                }\n            } \n            // 更新 stake 节点相关的 data，代码逻辑和实现与上面对 token 节点的处理相同\n            else if (this.action.stakeLabelIDMap.has(this.data[i].type)) {\n                let tmpInstance = this.nodesInstance.get(this.action.stakeLabelIDMap.get(this.data[i].type));\n                let roleIdxMap = new Map();\n                \n                for (let j = 0; j < this.data[i].data.length; j++) {\n                    roleIdxMap.set(this.data[i].data[j].type, j);\n                }\n\n                // TODO 目前对于 stake 节点只支持将 rewardAllocated 数据可视化\n                for (let item of tmpInstance.rewardAllocated) {\n                    if (!roleIdxMap.has(item[0])) {\n                        let len = this.data[i].data.push({type: item[0], data:[]});\n                        roleIdxMap.set(item[0], len - 1);\n                    }\n                    this.data[i].data[roleIdxMap.get(item[0])].data.push({time: String(this.curDay), value: item[1]});\n                }\n            } \n            \n        }\n    }\n\n    updateOverallData() {\n        for (let i = 0; i < this.data.length; i++) {\n            // 更新 unstake 节点相关的 data，代码逻辑和实现与上面对 token 节点的处理大体相似，稍有不同\n            if (this.action.unstakeLabelIDMap.has(this.data[i].type)) {\n                let originalHistory = this.nodesInstance.get(this.action.unstakeLabelIDMap.get(this.data[i].type)).unstakeHistory;\n                let roleIdxMap = new Map();\n\n                for (let j = 0; j < this.data[i].data.length; j++) {\n                    roleIdxMap.set(this.data[i].data[j].type, j);\n                    // roleTimedataIdxMap.set(this.data[i].data[j].type, new Map());\n                }\n\n                for (let item of originalHistory) {\n                    // item: {key: 时间, value: {key:\"Team\", value: 100}}\n                    for (let item2 of item[1]) {\n                        // item2: {key: \"Team\", value: 100}\n                        if (!roleIdxMap.has(item2[0])) {\n                            let len = this.data[i].data.push({type: item2[0], data:[]});\n                            roleIdxMap.set(item2[0], len - 1);\n                        }\n                        this.data[i].data[roleIdxMap.get(item2[0])].data.push({time: String(item[0]), value: item2[1]});\n                    }\n                    \n                }\n\n            }\n            // 更新 vest 节点相关的 data, 代码逻辑和实现与上面对 token 节点的处理大体相似，稍有不同\n            else if (this.action.vestLabelIDMap.has(this.data[i].type)) {\n                let originalHistory = this.nodesInstance.get(this.action.vestLabelIDMap.get(this.data[i].type)).vestHistory;\n                let orderedHistory = new Map();\n\n                // 由于 vestHistory 的插入顺序不是按天的顺序插入，所以需要重新按天排序\n                let keys = new Array();\n                for (let item of originalHistory) {\n                    keys.push(item[0]);\n                }\n                keys.sort(function(a, b) {\n                    return a - b;\n                });\n                for(let i = 0; i < keys.length; i++) {\n                    orderedHistory.set(keys[i], originalHistory.get(keys[i]));\n                }\n\n                let roleIdxMap = new Map();\n\n                for (let j = 0; j < this.data[i].data.length; j++) {\n                    roleIdxMap.set(this.data[i].data[j].type, j);\n                }\n\n                for (let item of orderedHistory) {\n                    // item: {key: 时间, value: {key:\"Team\", value: 100}}\n                    for (let item2 of item[1]) {\n                        // item2: {key: \"Team\", value: 100}\n                        if (!roleIdxMap.has(item2[0])) {\n                            let len = this.data[i].data.push({type: item2[0], data:[]});\n                            roleIdxMap.set(item2[0], len - 1);\n                        }\n                        this.data[i].data[roleIdxMap.get(item2[0])].data.push({time: String(item[0]), value: item2[1]});\n                    }\n                    \n                }\n            }\n        }\n    }\n\n    // 当模型从暂停状态重新启动测算时，用户可能对参数进行了修改，新的参数需要更新到模型中\n    selfUpdate(graph, endDay, slot) {\n        // 确保 endDay 大于当前\n        if (endDay < this.curDay) {\n            console.log(\"end day is illegal!\");\n            return;\n        }\n\n        this.endDay = endDay;\n        this.slot = slot;\n\n        let nodes = graph.model.getNodes();\n        nodes.forEach(element => {\n            this.antvNodes.set(element.id, element);\n        });\n\n        // 更新 Token 节点对象\n        for (let item of this.tokenLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.tokenData;\n            console.log(\"update token data:\", nodeData);\n            this.nodesInstance.get(item[1]).selfUpdate(item[0], nodeData.totalSupply, nodeData.allocations, nodeData.community);\n        }\n\n        // 更新 stake 节点对象\n        for (let item of this.action.stakeLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.stakeData;\n            console.log(\"update stake data:\", nodeData);\n            let tokenInstance = this.nodesInstance.get(this.tokenLabelIDMap.get(nodeData.rewardPolicyFrom));\n            console.log(\"update stake data rewardPolicyFrom:\", nodeData.rewardPolicyFrom);\n            let rewardPolicy = {\n                // 此处 rewardTotal 指的是单个 stake 池子所能释放奖励的总量。其值取决于释放的 token 中设置的 Community Staking 总量除以可以释放该 token 的 stake 池总数  \n                rewardTotal: (tokenInstance.communityPolicy.allocations.get(\"Staking\") * tokenInstance.allocationPercent.get(\"Community\") * tokenInstance.totalSupply / tokenInstance.communityPolicy.stakingPool).toFixed(4),\n                rewardLifetime: tokenInstance.communityPolicy.stakingRewardLifetime,\n                rewardRefreshPeriod: tokenInstance.communityPolicy.stakingRewardRefreshPeriod,\n                rewardDefactor: tokenInstance.communityPolicy.stakingRewardDefactor,\n            };\n            this.nodesInstance.get(item[1]).selfUpdate(item[0], rewardPolicy, nodeData.stakeAmount);\n        }\n\n        // 更新 unstake 节点对象\n        for (let item of this.action.unstakeLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.unstakeData;\n            console.log(\"update unstake data:\", nodeData);\n            this.nodesInstance.get(item[1]).selfUpdate(item[0], nodeData.coolDownTime, nodeData.unstakeAmount);\n        }\n\n        // 更新 vest 节点对象\n        for (let item of this.action.vestLabelIDMap) {\n            let antvNode = this.antvNodes.get(item[1]);\n            let nodeData = antvNode.getData().nodeData.vestData;\n            console.log(\"update vest data:\", nodeData);\n            this.nodesInstance.get(item[1]).selfUpdate(item[0], nodeData.vestAmount);\n        }\n    }\n}"]}]}