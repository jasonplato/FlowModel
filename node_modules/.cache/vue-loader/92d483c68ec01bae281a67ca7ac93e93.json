{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xufei/Desktop/FlowModel/src/components/create/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/components/create/LineChart.vue","mtime":1653708835747},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js","mtime":1653708694636}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IExpbmUgfSBmcm9tICJAYW50di9nMnBsb3QiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImxpbmVDaGFydCIsCiAgcHJvcHM6IHsKICAgIGxpbmVkYXRhOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfSwKICAgIH0sCiAgICBIZWlnaHQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiA1MDAsCiAgICB9LAogICAgV2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiA3MDAsCiAgICB9LAogICAgeEZpZWxkOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogInRpbWUiLAogICAgfSwKICAgIHlGaWVsZDogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICJ2YWx1ZSIsCiAgICB9LAogICAgY2F0ZWdvcnk6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiY2F0ZWdvcnkiLAogICAgfSwKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhbHJlYWR5UmVuZGVyOiBmYWxzZSwKICAgICAgTGluZVBsb3Q6IG51bGwsCiAgICAgIHRva2VuVHlwZTogW10sCiAgICAgIHNlbGVjdFRva2VuOiBudWxsLAogICAgICBjaGFydFNob3c6IHRydWUsCiAgICB9OwogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuaW5pdEcyUGxvdCgpOwogIH0sCiAgbWV0aG9kczogewogICAgaGFuZGxlQ29tbWFuZChjb21tYW5kKSB7CiAgICAgIGxldCBzZWxlY3REYXRhID0gW107CiAgICAgIHRoaXMuc2VsZWN0VG9rZW4gPSBjb21tYW5kOwogICAgICAvL+WmguaenOacqumAieaVsOaNruWImea4suafk+S4uuepugogICAgICBpZiAodGhpcy5saW5lZGF0YS5sZW5ndGggPT0gMCkgewogICAgICAgIHRoaXMuTGluZVBsb3QuY2hhbmdlRGF0YShbXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy/moLnmja7miYDpgInmi6nnmoR0b2tlbuexu+WIq+S+v+WIqeWvueW6lOeahOWOhuWPsuaVsOaNrgogICAgICAgIHRoaXMubGluZWRhdGEuZm9yRWFjaCgoaXRlbSkgPT4gewogICAgICAgICAgaXRlbS5kYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHsKICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PSBjb21tYW5kKSB7CiAgICAgICAgICAgICAgZWxlbWVudC5kYXRhLmZvckVhY2goKG1ldGFEYXRhKSA9PiB7CiAgICAgICAgICAgICAgICBtZXRhRGF0YS5kYXRhLmZvckVhY2goKHJvdykgPT4gewogICAgICAgICAgICAgICAgICBzZWxlY3REYXRhLnB1c2goewogICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBpdGVtLmNhdGVnb3J5ICsgIi0iICsgbWV0YURhdGEudHlwZSwKICAgICAgICAgICAgICAgICAgICB0aW1lOiByb3cudGltZSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcm93LnZhbHVlLAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgICAvL+WmguaenOS7juacqua4suafk+i/h+WImea4suafkwogICAgICBpZiAoIXRoaXMuYWxyZWFkeVJlbmRlcikgewogICAgICAgIHRoaXMuTGluZVBsb3QucmVuZGVyKCk7CiAgICAgIH0KICAgICAgLy/lkKbliJnnm7TmjqXmm7TmlrDmlbDmja4KICAgICAgdGhpcy5MaW5lUGxvdC5jaGFuZ2VEYXRhKHNlbGVjdERhdGEpOwogICAgfSwKCiAgICAvKioKICAgICAqIGNoYXJ05Zu+6KGo5Yid5aeL5YyWCiAgICAgKiDpnIDopoHmoLnmja7lkI7mnJ/nmoTmlbDmja7liqjmgIHkv67mlLnlhbbkuK3nmoR477yMeeWtl+autQogICAgICovCiAgICBpbml0RzJQbG90KCkgewogICAgICB0aGlzLkxpbmVQbG90ID0gbmV3IExpbmUodGhpcy4kcmVmcy5saW5lQ2hhcnQsIHsKICAgICAgICBkYXRhOiB0aGlzLmxpbmVkYXRhLAogICAgICAgIGhlaWdodDogdGhpcy5IZWlnaHQsCiAgICAgICAgd2lkdGg6IHRoaXMuV2lkdGgsCiAgICAgICAgeEZpZWxkOiB0aGlzLnhGaWVsZCwKICAgICAgICB5RmllbGQ6IHRoaXMueUZpZWxkLAogICAgICAgIHNlcmllc0ZpZWxkOiB0aGlzLmNhdGVnb3J5LAogICAgICAgIHNtb290aDogdHJ1ZSwKCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIC8vIOaVsOWAvOagvOW8j+WMluS4uuWNg+WIhuS9jQogICAgICAgICAgICBmb3JtYXR0ZXI6ICh2KSA9PgogICAgICAgICAgICAgIGAke3Z9YC5yZXBsYWNlKC9cZHsxLDN9KD89KFxkezN9KSskKS9nLCAocykgPT4gYCR7c30sYCksCiAgICAgICAgICB9LAogICAgICAgICAgZ3JpZDogewogICAgICAgICAgICBsaW5lOiB7CiAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIHN0cm9rZTogImJsYWNrIiwKICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMC4yLAogICAgICAgICAgICAgICAgbGluZURhc2g6IFs0LCA1XSwKICAgICAgICAgICAgICAgIHN0cm9rZU9wYWNpdHk6IDAuNywKICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAiYmxhY2siLAogICAgICAgICAgICAgICAgc2hhZG93Qmx1cjogMTAsCiAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiA1LAogICAgICAgICAgICAgICAgc2hhZG93T2Zmc2V0WTogNSwKICAgICAgICAgICAgICAgIGN1cnNvcjogInBvaW50ZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgc2xpZGVyOnsKICAgICAgICAgIHN0YXJ0OjAsCiAgICAgICAgICBlbmQ6MQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIGlmICh0aGlzLmxpbmVkYXRhLmxlbmd0aCAhPSAwKSB7CiAgICAgICAgdGhpcy5MaW5lUGxvdC5yZW5kZXIoKTsKICAgICAgfQogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICAvKioKICAgICAqIOebkeWQrOWvueW6lOaVsOaNruWtl+aute+8jOW9k+aVsOaNruWPkeeUn+WPmOWMluaXtumHjeaWsOa4suafkwogICAgICovCiAgICBsaW5lZGF0YTogewogICAgICBoYW5kbGVyKCkgewogICAgICAgIHRoaXMudG9rZW5UeXBlID0gW107CiAgICAgICAgaWYgKHRoaXMubGluZWRhdGEubGVuZ3RoICE9IDApIHsKICAgICAgICAgIHRoaXMuY2hhcnRTaG93ID0gZmFsc2U7CiAgICAgICAgICB0aGlzLmxpbmVkYXRhWzBdLmRhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4gewogICAgICAgICAgICB0aGlzLnRva2VuVHlwZS5wdXNoKGVsZW1lbnQudHlwZSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIC8v5b2T6KKr6YCJ5oup5pWw5o2u5LiN5Li656m65pe277yM5LiU5pu+57uP5pyq6YCJ5oup6L+H77yM55u05o6l5L2/55So56ys5LiA5LiqdG9rZW7lrZfmrrXkvZzkuLrlsZXnpLoKICAgICAgICAgIGlmICh0aGlzLnNlbGVjdFRva2VuID09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKHRoaXMudG9rZW5UeXBlWzBdKTsKICAgICAgICAgICAgdGhpcy5zZWxlY3RUb2tlbiA9IHRoaXMudG9rZW5UeXBlWzBdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVDb21tYW5kKHRoaXMuc2VsZWN0VG9rZW4pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmNoYXJ0U2hvdyA9IHRydWU7CiAgICAgICAgfQogICAgICB9LAogICAgICBkZWVwOiB0cnVlLAogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components/create","sourcesContent":["<template>\n  <div class=\"box\">\n    <div v-bind:class=\"{ show: chartShow }\">\n      <div class=\"attr-select\">\n        <el-dropdown @command=\"handleCommand\">\n          <span class=\"el-dropdown-link\">\n            {{ this.selectToken }}\n            <i class=\"el-icon-arrow-down el-icon--right\"></i>\n          </span>\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item\n              v-for=\"item in tokenType\"\n              :key=\"item\"\n              :command=\"item\"\n              >{{ item }}</el-dropdown-item\n            >\n          </el-dropdown-menu>\n        </el-dropdown>\n      </div>\n      <div id=\"lineChart\" ref=\"lineChart\" class=\"lineChart\"></div>\n    </div>\n    <!-- 空状态时显示 -->\n    <el-empty\n      description=\"Please select data first!\"\n      class=\"empty-box\"\n      v-bind:class=\"{ show: !chartShow }\"\n    ></el-empty>\n  </div>\n</template>\n \n<script>\nimport { Line } from \"@antv/g2plot\";\nexport default {\n  name: \"lineChart\",\n  props: {\n    linedata: {\n      type: Array,\n      default() {\n        return [];\n      },\n    },\n    Height: {\n      type: Number,\n      default: 500,\n    },\n    Width: {\n      type: Number,\n      default: 700,\n    },\n    xField: {\n      type: String,\n      default: \"time\",\n    },\n    yField: {\n      type: String,\n      default: \"value\",\n    },\n    category: {\n      type: String,\n      default: \"category\",\n    },\n  },\n  data() {\n    return {\n      alreadyRender: false,\n      LinePlot: null,\n      tokenType: [],\n      selectToken: null,\n      chartShow: true,\n    };\n  },\n  mounted() {\n    this.initG2Plot();\n  },\n  methods: {\n    handleCommand(command) {\n      let selectData = [];\n      this.selectToken = command;\n      //如果未选数据则渲染为空\n      if (this.linedata.length == 0) {\n        this.LinePlot.changeData([]);\n      } else {\n        //根据所选择的token类别便利对应的历史数据\n        this.linedata.forEach((item) => {\n          item.data.forEach((element) => {\n            if (element.type == command) {\n              element.data.forEach((metaData) => {\n                metaData.data.forEach((row) => {\n                  selectData.push({\n                    category: item.category + \"-\" + metaData.type,\n                    time: row.time,\n                    value: row.value,\n                  });\n                });\n              });\n            }\n          });\n        });\n      }\n      //如果从未渲染过则渲染\n      if (!this.alreadyRender) {\n        this.LinePlot.render();\n      }\n      //否则直接更新数据\n      this.LinePlot.changeData(selectData);\n    },\n\n    /**\n     * chart图表初始化\n     * 需要根据后期的数据动态修改其中的x，y字段\n     */\n    initG2Plot() {\n      this.LinePlot = new Line(this.$refs.lineChart, {\n        data: this.linedata,\n        height: this.Height,\n        width: this.Width,\n        xField: this.xField,\n        yField: this.yField,\n        seriesField: this.category,\n        smooth: true,\n\n        yAxis: {\n          label: {\n            // 数值格式化为千分位\n            formatter: (v) =>\n              `${v}`.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (s) => `${s},`),\n          },\n          grid: {\n            line: {\n              style: {\n                stroke: \"black\",\n                lineWidth: 0.2,\n                lineDash: [4, 5],\n                strokeOpacity: 0.7,\n                shadowColor: \"black\",\n                shadowBlur: 10,\n                shadowOffsetX: 5,\n                shadowOffsetY: 5,\n                cursor: \"pointer\",\n              },\n            },\n          },\n        },\n        slider:{\n          start:0,\n          end:1\n        }\n      });\n      if (this.linedata.length != 0) {\n        this.LinePlot.render();\n      }\n    },\n  },\n  watch: {\n    /**\n     * 监听对应数据字段，当数据发生变化时重新渲染\n     */\n    linedata: {\n      handler() {\n        this.tokenType = [];\n        if (this.linedata.length != 0) {\n          this.chartShow = false;\n          this.linedata[0].data.forEach((element) => {\n            this.tokenType.push(element.type);\n          });\n          //当被选择数据不为空时，且曾经未选择过，直接使用第一个token字段作为展示\n          if (this.selectToken == null) {\n            this.handleCommand(this.tokenType[0]);\n            this.selectToken = this.tokenType[0];\n          } else {\n            this.handleCommand(this.selectToken);\n          }\n        } else {\n          this.chartShow = true;\n        }\n      },\n      deep: true,\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.box {\n  padding: 5px;\n  .attr-select {\n    span {\n      margin-right: 5px;\n      font-size: 14px;\n      font-weight: 600;\n    }\n  }\n  .lineChart {\n    margin-top: 30px;\n  }\n  .empty-box {\n    height: 546px;\n  }\n}\n.show {\n  display: none !important;\n}\n</style>"]}]}