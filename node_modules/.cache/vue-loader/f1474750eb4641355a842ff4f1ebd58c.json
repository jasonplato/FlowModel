{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xufei/Desktop/FlowModel/src/pages/Sell.vue?vue&type=template&id=82255614&scoped=true&","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/pages/Sell.vue","mtime":1653708835765},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1653708694637},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js","mtime":1653708694636}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}