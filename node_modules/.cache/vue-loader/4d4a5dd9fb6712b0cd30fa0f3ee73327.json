{"remainingRequest":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xufei/Desktop/FlowModel/src/components/create/RuleEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xufei/Desktop/FlowModel/src/components/create/RuleEdit.vue","mtime":1653708835747},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/babel-loader/lib/index.js","mtime":1653708688758},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/cache-loader/dist/cjs.js","mtime":1653708689072},{"path":"/Users/xufei/Desktop/FlowModel/node_modules/vue-loader/lib/index.js","mtime":1653708694636}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMgfSBmcm9tICJ2dWV4IjsKCmNvbnN0IGFudGxyNCA9IHJlcXVpcmUoImFudGxyNCIpOwpjb25zdCBJbnB1dFN0cmVhbSA9IGFudGxyNC5JbnB1dFN0cmVhbTsKY29uc3QgQ29tbW9uVG9rZW5TdHJlYW0gPSBhbnRscjQuQ29tbW9uVG9rZW5TdHJlYW07CmNvbnN0IEdyYW1tYXJQYXJzZXIgPSByZXF1aXJlKCIuLi8uLi9wYXJzZXIvUHJvcGVydHlQYXJzZXIiKS5Qcm9wZXJ0eVBhcnNlcjsKY29uc3QgR3JhbW1hckxleGVyID0gcmVxdWlyZSgiLi4vLi4vcGFyc2VyL1Byb3BlcnR5TGV4ZXIiKS5Qcm9wZXJ0eUxleGVyOwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBuZXdSdWxlOiBudWxsLAogICAgICBsb2FkZWQ6IGZhbHNlLAogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC4uLm1hcE11dGF0aW9ucyhbIlNBVkVfRURJVF9SVUxFIl0pLAogICAgZWRpdCgpIHsKICAgICAgLy8g5q+P5qyh57yW6L6R5a6MIC8g5L+u5pS55a6MIHByb3BlcnR5IOS5i+WQju+8jHByb3BlcnR5IOeahCBzdGF0dXMg5bqU6YeN572u5Li6IGZhbHNlCiAgICAgIHRoaXMubmV3UnVsZS5zdGF0dXMgPSBmYWxzZTsKICAgICAgdHJ5IHsKICAgICAgICAvLyDlr7nkuo7nlKjmiLfovpPlhaXnmoQgcHJvcGVydHkg6L+b6KGM6K+t5rOV5qOA5p+lCiAgICAgICAgY29uc3QgaW5wdXRTdHJlYW0gPSBuZXcgSW5wdXRTdHJlYW0odGhpcy5uZXdSdWxlLmNvbnRlbnQpOwogICAgICAgIGNvbnN0IGxleGVyID0gbmV3IEdyYW1tYXJMZXhlcihpbnB1dFN0cmVhbSk7CiAgICAgICAgY29uc3QgdG9rZW5TdHJlYW0gPSBuZXcgQ29tbW9uVG9rZW5TdHJlYW0obGV4ZXIpOwogICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBHcmFtbWFyUGFyc2VyKHRva2VuU3RyZWFtKTsKICAgICAgICBwYXJzZXIucmVtb3ZlRXJyb3JMaXN0ZW5lcnMoKTsKICAgICAgICBwYXJzZXIuYWRkRXJyb3JMaXN0ZW5lcih7CiAgICAgICAgICBzeW50YXhFcnJvcjogKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGVycikgPT4gewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke29mZmVuZGluZ1N5bWJvbH0gbGluZSAke2xpbmV9LCBjb2wgJHtjb2x1bW59OiAke21zZ31gKTsKICAgICAgICAgICAgdGhyb3cgZXJyOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGNvbnN0IHRyZWUgPSBwYXJzZXIuY2hlY2soKTsKCiAgICAgICAgLy8g6K+t5rOV5qOA5p+l6YCa6L+H5ZCO77yM5L+d5a2YIHByb3BlcnR5CiAgICAgICAgdGhpcy5TQVZFX0VESVRfUlVMRSh0aGlzLm5ld1J1bGUpOwogICAgICAgIHRoaXMucnVsZUVkaXRTaG93LnNob3cgPSBmYWxzZTsKICAgICAgfSBjYXRjaCB7CiAgICAgICAgYWxlcnQoIldyb25nIEdyYW1tYXIhIik7CiAgICAgIH0KICAgICAgCiAgICB9LAogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKFsicnVsZUVkaXRTaG93IiwgImVkaXRSdWxlIiwgInJ1bGVMaXN0cyJdKSwKICB9LAogIG1vdW50ZWQoKSB7CiAgICBpZiAoIXRoaXMucnVsZUVkaXRTaG93LmFkZCkgewogICAgICB0aGlzLm5ld1J1bGUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmVkaXRSdWxlKTsKICAgIH0gZWxzZSB7CiAgICAgIGxldCBuZXdJZCA9IDA7CiAgICAgIGlmICh0aGlzLnJ1bGVMaXN0cy5sZW5ndGggPT0gMCkgewogICAgICB9IGVsc2UgewogICAgICAgIG5ld0lkID0gdGhpcy5ydWxlTGlzdHNbdGhpcy5ydWxlTGlzdHMubGVuZ3RoIC0gMV0uaWQgKyAxOwogICAgICB9CgogICAgICB0aGlzLm5ld1J1bGUgPSB7IGlkOiBuZXdJZCwgbGFiZWw6ICIiLCBjb250ZW50OiAiIiwgc3RhdHVzOiBmYWxzZSB9OwogICAgfQogICAgdGhpcy5sb2FkZWQgPSB0cnVlOwogIH0sCn07Cg=="},{"version":3,"sources":["RuleEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"RuleEdit.vue","sourceRoot":"src/components/create","sourcesContent":["<template >\n  <div>\n    <div class=\"rule-edit-container\" v-if=\"loaded\">\n      <el-dialog\n        title=\"Property Edit\"\n        :visible.sync=\"ruleEditShow.show\"\n        width=\"30%\"\n      >\n        <div class=\"name\">\n          <span>Property Name:</span\n          ><el-input\n            class=\"name-input\"\n            v-model=\"newRule.label\"\n            placeholder=\"\"\n          ></el-input>\n        </div>\n\n        <div class=\"content\">\n          <span>Property Content:</span>\n          <el-input\n            class=\"content-input\"\n            v-model=\"newRule.content\"\n            placeholder=\"\"\n          ></el-input>\n        </div>\n\n        <span slot=\"footer\" class=\"dialog-footer\">\n          <el-button @click=\"ruleEditShow.show = false\">Cancel</el-button>\n          <el-button type=\"primary\" @click=\"edit()\">Confirm</el-button>\n        </span>\n      </el-dialog>\n    </div>\n  </div>\n</template>\n<script>\nimport { mapState, mapMutations } from \"vuex\";\n\nconst antlr4 = require(\"antlr4\");\nconst InputStream = antlr4.InputStream;\nconst CommonTokenStream = antlr4.CommonTokenStream;\nconst GrammarParser = require(\"../../parser/PropertyParser\").PropertyParser;\nconst GrammarLexer = require(\"../../parser/PropertyLexer\").PropertyLexer;\n\nexport default {\n  data() {\n    return {\n      newRule: null,\n      loaded: false,\n    };\n  },\n  methods: {\n    ...mapMutations([\"SAVE_EDIT_RULE\"]),\n    edit() {\n      // 每次编辑完 / 修改完 property 之后，property 的 status 应重置为 false\n      this.newRule.status = false;\n      try {\n        // 对于用户输入的 property 进行语法检查\n        const inputStream = new InputStream(this.newRule.content);\n        const lexer = new GrammarLexer(inputStream);\n        const tokenStream = new CommonTokenStream(lexer);\n        const parser = new GrammarParser(tokenStream);\n        parser.removeErrorListeners();\n        parser.addErrorListener({\n          syntaxError: (recognizer, offendingSymbol, line, column, msg, err) => {\n            console.error(`${offendingSymbol} line ${line}, col ${column}: ${msg}`);\n            throw err;\n          }\n        });\n        const tree = parser.check();\n\n        // 语法检查通过后，保存 property\n        this.SAVE_EDIT_RULE(this.newRule);\n        this.ruleEditShow.show = false;\n      } catch {\n        alert(\"Wrong Grammar!\");\n      }\n      \n    },\n  },\n  computed: {\n    ...mapState([\"ruleEditShow\", \"editRule\", \"ruleLists\"]),\n  },\n  mounted() {\n    if (!this.ruleEditShow.add) {\n      this.newRule = Object.assign({}, this.editRule);\n    } else {\n      let newId = 0;\n      if (this.ruleLists.length == 0) {\n      } else {\n        newId = this.ruleLists[this.ruleLists.length - 1].id + 1;\n      }\n\n      this.newRule = { id: newId, label: \"\", content: \"\", status: false };\n    }\n    this.loaded = true;\n  },\n};\n</script>\n<style lang=\"scss\">\n.rule-edit-container {\n  width: 400px;\n  .el-dialog {\n    border-radius: 20px;\n  }\n  .name {\n    .name-input {\n      margin-left: 20px;\n      width: 300px;\n    }\n  }\n  .content {\n    margin-top: 20px;\n    .content-input {\n      margin-left: 10px;\n      width: 300px;\n    }\n  }\n}\n</style>"]}]}